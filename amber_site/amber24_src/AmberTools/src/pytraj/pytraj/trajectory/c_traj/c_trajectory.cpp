/* Generated by Cython 0.29.36 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "pytraj.trajectory.c_traj.c_trajectory",
        "sources": [
            "pytraj/trajectory/c_traj/c_trajectory.pyx"
        ]
    },
    "module_name": "pytraj.trajectory.c_traj.c_trajectory"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_36"
#define CYTHON_HEX_VERSION 0x001D24F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pytraj__trajectory__c_traj__c_trajectory
#define __PYX_HAVE_API__pytraj__trajectory__c_traj__c_trajectory
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <string.h>
#include <string>
#include "Grid.h"
#include "Matrix.h"
#include "Matrix_3x3.h"
#include "Vec3.h"
#include <sys/types.h>
#include <unistd.h>
#include "Box.h"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include "ParameterTypes.h"
#include "CoordinateInfo.h"
#include "Topology.h"
#include "ParmFile.h"
#include "MetaData.h"
#include "DataSet.h"
#include "DataSet_1D.h"
#include "DataSet_double.h"
#include "DataSet_float.h"
#include "DataSet_integer_mem.h"
#include "DataSet_string.h"
#include "DataSet_Vector.h"
#include "DataSet_2D.h"
#include "DataSet_MatrixDbl.h"
#include "DataSet_MatrixFlt.h"
#include "DataSet_3D.h"
#include "DataSet_GridFlt.h"
#include "DataSet_GridDbl.h"
#include "DataSet_Modes.h"
#include "DataSet_RemLog.h"
#include "DataSet_Mat3x3.h"
#include "DataSet_Mesh.h"
#include "DataSet_Coords.h"
#include "DataSet_Coords_CRD.h"
#include "DataSet_Coords_REF.h"
#include "DataSet_Topology.h"
#include "DataSetList.h"
#include "DataFile.h"
#include "DataFileList.h"
#include "CpptrajState.h"
#include "Command.h"
#include "BaseIOtype.h"
#include "DispatchObject.h"
#include "AtomMask.h"
#include "FileName.h"
#include "NameType.h"
#include "ArgList.h"
#include "Atom.h"
#include "Residue.h"
#include "Molecule.h"
#include "Frame.h"
#include "ActionState.h"
#include "Action.h"
#include "Action_Align.h"
#include "Action_Angle.h"
#include "Action_AreaPerMol.h"
#include "Action_AtomMap.h"
#include "Action_AtomicCorr.h"
#include "Action_AtomicFluct.h"
#include "Action_AutoImage.h"
#include "Action_Average.h"
#include "Action_Bounds.h"
#include "Action_Box.h"
#include "Action_Center.h"
#include "Action_Channel.h"
#include "Action_CheckChirality.h"
#include "Action_CheckStructure.h"
#include "Action_Closest.h"
#include "Action_ClusterDihedral.h"
#include "Action_Contacts.h"
#include "Action_CreateCrd.h"
#include "Action_DNAionTracker.h"
#include "Action_DSSP.h"
#include "Action_Density.h"
#include "Action_Diffusion.h"
#include "Action_Dihedral.h"
#include "Action_Dipole.h"
#include "Action_DistRmsd.h"
#include "Action_Distance.h"
#include "Action_Energy.h"
#include "Action_Esander.h"
#include "Action_FilterByData.h"
#include "Action_FixAtomOrder.h"
#include "Action_FixImagedBonds.h"
#include "Action_GIST.h"
#include "Action_Grid.h"
#include "Action_GridFreeEnergy.h"
#include "Action_HydrogenBond.h"
#include "Action_Image.h"
#include "Action_Jcoupling.h"
#include "Action_LESsplit.h"
#include "Action_LIE.h"
#include "Action_LipidOrder.h"
#include "Action_MakeStructure.h"
#include "Action_Mask.h"
#include "Action_Matrix.h"
#include "Action_MinImage.h"
#include "Action_Molsurf.h"
#include "Action_MultiDihedral.h"
#include "Action_MultiVector.h"
#include "Action_NAstruct.h"
#include "Action_NMRrst.h"
#include "Action_NativeContacts.h"
#include "Action_OrderParameter.h"
#include "Action_Outtraj.h"
#include "Action_PairDist.h"
#include "Action_Pairwise.h"
#include "Action_Principal.h"
#include "Action_Projection.h"
#include "Action_Pucker.h"
#include "Action_Radgyr.h"
#include "Action_Radial.h"
#include "Action_RandomizeIons.h"
#include "Action_Remap.h"
#include "Action_ReplicateCell.h"
#include "Action_Rmsd.h"
#include "Action_Rotate.h"
#include "Action_RunningAvg.h"
#include "Action_STFC_Diffusion.h"
#include "Action_Scale.h"
#include "Action_SetVelocity.h"
#include "Action_Spam.h"
#include "Action_Strip.h"
#include "Action_Surf.h"
#include "Action_SymmetricRmsd.h"
#include "Action_Temperature.h"
#include "Action_Translate.h"
#include "Action_Unstrip.h"
#include "Action_Unwrap.h"
#include "Action_Vector.h"
#include "Action_VelocityAutoCorr.h"
#include "Action_Volmap.h"
#include "Action_Volume.h"
#include "Action_Watershell.h"
#include "Action_XtalSymm.h"
#include "ActionList.h"
#include "DataSet_Coords_TRJ.h"
#include "pythread.h"
#include <stdlib.h>
#include <stdio.h>
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pytraj/trajectory/c_traj/c_trajectory.pyx",
  "pytraj/trajectory/c_traj/c_trajectory.pxd",
  "stringsource",
  "pytraj/trajectory/frame.pxd",
  "pytraj/math/cpp_math.pxd",
  "pytraj/core/box.pxd",
  "pytraj/core/parameter_types.pxd",
  "pytraj/topology/topology.pxd",
  "pytraj/core/coordinfo.pxd",
  "pytraj/datasets/c_datasets.pxd",
  "pytraj/datasets/c_datasetlist.pxd",
  "pytraj/datafiles/datafiles.pxd",
  "pytraj/core/c_core.pxd",
  "pytraj/core/topology_objects.pxd",
  "pytraj/analysis/c_action/c_action.pxd",
  "pytraj/analysis/c_action/actionlist.pxd",
};
/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_incr_aligned(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && CYTHON_COMPILING_IN_NOGIL
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd)
    #define __pyx_atomic_incr_aligned(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_aligned(value) _InterlockedExchangeAdd(value, -1)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/*--- Type declarations ---*/
struct __pyx_obj_6pytraj_4math_8cpp_math_Grid;
struct __pyx_obj_6pytraj_4math_8cpp_math_Matrix_3x3;
struct __pyx_obj_6pytraj_4math_8cpp_math_Vec3;
struct __pyx_obj_6pytraj_4core_3box_Box;
struct __pyx_obj_6pytraj_4core_15parameter_types_AngleType;
struct __pyx_obj_6pytraj_4core_15parameter_types_NonbondParmType;
struct __pyx_obj_6pytraj_4core_15parameter_types_LES_AtomType;
struct __pyx_obj_6pytraj_4core_15parameter_types_AngleParmType;
struct __pyx_obj_6pytraj_4core_15parameter_types_CmapType;
struct __pyx_obj_6pytraj_4core_15parameter_types_LES_ParmType;
struct __pyx_obj_6pytraj_4core_15parameter_types_HB_ParmType;
struct __pyx_obj_6pytraj_4core_15parameter_types_NonbondType;
struct __pyx_obj_6pytraj_4core_15parameter_types_ChamberParmType;
struct __pyx_obj_6pytraj_4core_15parameter_types_BondParmType;
struct __pyx_obj_6pytraj_4core_15parameter_types_CmapGridType;
struct __pyx_obj_6pytraj_4core_15parameter_types_DihedralType;
struct __pyx_obj_6pytraj_4core_15parameter_types_BondType;
struct __pyx_obj_6pytraj_4core_15parameter_types_CapParmType;
struct __pyx_obj_6pytraj_4core_15parameter_types_DihedralParmType;
struct __pyx_obj_6pytraj_8topology_8topology_Topology;
struct __pyx_obj_6pytraj_8topology_8topology_ParmFile;
struct __pyx_obj_6pytraj_4core_9coordinfo_CoordinateInfo;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset1D;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetDouble;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetFloat;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetInteger;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetString;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetVector;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset2D;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetMatrixDouble;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetMatrixFloat;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset3D;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetGridFloat;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetGridDouble;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetModes;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetRemLog;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_ReplicaFrame;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetMatrix3x3;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetMesh;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetCoords;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetCoordsCRD;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetCoordsRef;
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetTopology;
struct __pyx_obj_6pytraj_8datasets_13c_datasetlist_DatasetList;
struct __pyx_obj_6pytraj_9datafiles_9datafiles_DataFile;
struct __pyx_obj_6pytraj_9datafiles_9datafiles_DataFileList;
struct __pyx_obj_6pytraj_4core_6c_core_CpptrajState;
struct __pyx_obj_6pytraj_4core_6c_core_BaseIOtype;
struct __pyx_obj_6pytraj_4core_6c_core_DispatchObject;
struct __pyx_obj_6pytraj_4core_6c_core_FunctPtr;
struct __pyx_obj_6pytraj_4core_6c_core_AtomMask;
struct __pyx_obj_6pytraj_4core_6c_core_FileName;
struct __pyx_obj_6pytraj_4core_6c_core_NameType;
struct __pyx_obj_6pytraj_4core_6c_core_ArgList;
struct __pyx_obj_6pytraj_4core_16topology_objects_Atom;
struct __pyx_obj_6pytraj_4core_16topology_objects_Residue;
struct __pyx_obj_6pytraj_4core_16topology_objects_Molecule;
struct __pyx_obj_6pytraj_10trajectory_5frame_Frame;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Align;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Angle;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AreaPerMol;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AtomMap;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AtomicCorr;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AtomicFluct;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AutoImage;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Average;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Bounds;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Box;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Center;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Channel;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_CheckChirality;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_CheckStructure;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Closest;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_ClusterDihedral;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Contacts;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_CreateCrd;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_DNAionTracker;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_DSSP;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Density;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Diffusion;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Dihedral;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Dipole;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_DistRmsd;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Distance;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Energy;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Esander;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_FilterByData;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_FixAtomOrder;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_FixImagedBonds;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_GIST;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Grid;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_GridFreeEnergy;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_HydrogenBond;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Image;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Jcoupling;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_LESsplit;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_LIE;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_LipidOrder;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_MakeStructure;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Mask;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Matrix;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_MinImage;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Molsurf;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_MultiDihedral;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_MultiVector;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_NAstruct;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_NMRrst;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_NativeContacts;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_OrderParameter;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Outtraj;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_PairDist;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Pairwise;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Principal;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Projection;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Pucker;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Radgyr;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Radial;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_RandomizeIons;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Remap;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_ReplicateCell;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Rmsd;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Rotate;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_RunningAvg;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_STFC_Diffusion;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Scale;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_SetVelocity;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Spam;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Strip;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Surf;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_SymmetricRmsd;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Temperature;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Translate;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Unstrip;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Unwrap;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Vector;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_VelocityAutoCorr;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Volmap;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Volume;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Watershell;
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_XtalSymm;
struct __pyx_obj_6pytraj_8analysis_8c_action_10actionlist_ActionList;
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj;
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range;
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_1___iter__;
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_2_iterframe;
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_3_iterchunk;
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_4__iterframe_indices;
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_5___set__;
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_6_genexpr;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "core/parameter_types.pxd":5
 * from libcpp.string cimport string
 * 
 * ctypedef vector[_BondParmType] BondParmArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_BondType] BondArray
 * ctypedef vector[_AngleParmType] AngleParmArray
 */
typedef std::vector<BondParmType>  __pyx_t_6pytraj_4core_15parameter_types_BondParmArray;

/* "core/parameter_types.pxd":6
 * 
 * ctypedef vector[_BondParmType] BondParmArray
 * ctypedef vector[_BondType] BondArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_AngleParmType] AngleParmArray
 * ctypedef vector[_AngleType] AngleArray
 */
typedef std::vector<BondType>  __pyx_t_6pytraj_4core_15parameter_types_BondArray;

/* "core/parameter_types.pxd":7
 * ctypedef vector[_BondParmType] BondParmArray
 * ctypedef vector[_BondType] BondArray
 * ctypedef vector[_AngleParmType] AngleParmArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_AngleType] AngleArray
 * ctypedef vector[_DihedralParmType] DihedralParmArray
 */
typedef std::vector<AngleParmType>  __pyx_t_6pytraj_4core_15parameter_types_AngleParmArray;

/* "core/parameter_types.pxd":8
 * ctypedef vector[_BondType] BondArray
 * ctypedef vector[_AngleParmType] AngleParmArray
 * ctypedef vector[_AngleType] AngleArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_DihedralParmType] DihedralParmArray
 * ctypedef vector[_DihedralType] DihedralArray
 */
typedef std::vector<AngleType>  __pyx_t_6pytraj_4core_15parameter_types_AngleArray;

/* "core/parameter_types.pxd":9
 * ctypedef vector[_AngleParmType] AngleParmArray
 * ctypedef vector[_AngleType] AngleArray
 * ctypedef vector[_DihedralParmType] DihedralParmArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_DihedralType] DihedralArray
 * ctypedef vector[_HB_ParmType] HB_ParmArray
 */
typedef std::vector<DihedralParmType>  __pyx_t_6pytraj_4core_15parameter_types_DihedralParmArray;

/* "core/parameter_types.pxd":10
 * ctypedef vector[_AngleType] AngleArray
 * ctypedef vector[_DihedralParmType] DihedralParmArray
 * ctypedef vector[_DihedralType] DihedralArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_HB_ParmType] HB_ParmArray
 * ctypedef vector[_NonbondType] NonbondArray
 */
typedef std::vector<DihedralType>  __pyx_t_6pytraj_4core_15parameter_types_DihedralArray;

/* "core/parameter_types.pxd":11
 * ctypedef vector[_DihedralParmType] DihedralParmArray
 * ctypedef vector[_DihedralType] DihedralArray
 * ctypedef vector[_HB_ParmType] HB_ParmArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_NonbondType] NonbondArray
 * ctypedef vector[_LES_AtomType] LES_Array
 */
typedef std::vector<HB_ParmType>  __pyx_t_6pytraj_4core_15parameter_types_HB_ParmArray;

/* "core/parameter_types.pxd":12
 * ctypedef vector[_DihedralType] DihedralArray
 * ctypedef vector[_HB_ParmType] HB_ParmArray
 * ctypedef vector[_NonbondType] NonbondArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_LES_AtomType] LES_Array
 * ctypedef vector[_CmapGridType] CmapGridArray
 */
typedef std::vector<NonbondType>  __pyx_t_6pytraj_4core_15parameter_types_NonbondArray;

/* "core/parameter_types.pxd":13
 * ctypedef vector[_HB_ParmType] HB_ParmArray
 * ctypedef vector[_NonbondType] NonbondArray
 * ctypedef vector[_LES_AtomType] LES_Array             # <<<<<<<<<<<<<<
 * ctypedef vector[_CmapGridType] CmapGridArray
 * ctypedef vector[_CmapType] CmapArray
 */
typedef std::vector<LES_AtomType>  __pyx_t_6pytraj_4core_15parameter_types_LES_Array;

/* "core/parameter_types.pxd":14
 * ctypedef vector[_NonbondType] NonbondArray
 * ctypedef vector[_LES_AtomType] LES_Array
 * ctypedef vector[_CmapGridType] CmapGridArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_CmapType] CmapArray
 * 
 */
typedef std::vector<CmapGridType>  __pyx_t_6pytraj_4core_15parameter_types_CmapGridArray;

/* "core/parameter_types.pxd":15
 * ctypedef vector[_LES_AtomType] LES_Array
 * ctypedef vector[_CmapGridType] CmapGridArray
 * ctypedef vector[_CmapType] CmapArray             # <<<<<<<<<<<<<<
 * 
 * # should I need to define fused type?
 */
typedef std::vector<CmapType>  __pyx_t_6pytraj_4core_15parameter_types_CmapArray;

/* "topology/topology.pxd":14
 * 
 * 
 * ctypedef cppvector[_Atom].const_iterator atom_iterator             # <<<<<<<<<<<<<<
 * ctypedef cppvector[_Residue].const_iterator res_iterator
 * ctypedef cppvector[_Molecule].const_iterator mol_iterator
 */
typedef std::vector<Atom> ::const_iterator __pyx_t_6pytraj_8topology_8topology_atom_iterator;

/* "topology/topology.pxd":15
 * 
 * ctypedef cppvector[_Atom].const_iterator atom_iterator
 * ctypedef cppvector[_Residue].const_iterator res_iterator             # <<<<<<<<<<<<<<
 * ctypedef cppvector[_Molecule].const_iterator mol_iterator
 * ctypedef cppvector[int].const_iterator bond_iterator
 */
typedef std::vector<Residue> ::const_iterator __pyx_t_6pytraj_8topology_8topology_res_iterator;

/* "topology/topology.pxd":16
 * ctypedef cppvector[_Atom].const_iterator atom_iterator
 * ctypedef cppvector[_Residue].const_iterator res_iterator
 * ctypedef cppvector[_Molecule].const_iterator mol_iterator             # <<<<<<<<<<<<<<
 * ctypedef cppvector[int].const_iterator bond_iterator
 * 
 */
typedef std::vector<Molecule> ::const_iterator __pyx_t_6pytraj_8topology_8topology_mol_iterator;

/* "topology/topology.pxd":17
 * ctypedef cppvector[_Residue].const_iterator res_iterator
 * ctypedef cppvector[_Molecule].const_iterator mol_iterator
 * ctypedef cppvector[int].const_iterator bond_iterator             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "CoordinateInfo.h":
 */
typedef std::vector<int> ::const_iterator __pyx_t_6pytraj_8topology_8topology_bond_iterator;

/* "datasets/c_datasets.pxd":13
 * 
 * 
 * ctypedef vector[size_t] SizeArray             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "MetaData.h":
 */
typedef std::vector<size_t>  __pyx_t_6pytraj_8datasets_10c_datasets_SizeArray;

/* "datasets/c_datasets.pxd":195
 * 
 * #ctypedef Matrix[double].iterator iterator
 * ctypedef vector[double] Darray             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "DataSet_MatrixDbl.h":
 */
typedef std::vector<double>  __pyx_t_6pytraj_8datasets_10c_datasets_Darray;

/* "datasets/c_datasets.pxd":339
 *     cdef public bint _own_memory
 * 
 * ctypedef cmap[double, int] TcmapType             # <<<<<<<<<<<<<<
 * cdef extern from "DataSet_RemLog.h":
 *     cdef cppclass _DatasetRemLog "DataSet_RemLog":
 */
typedef std::map<double,int>  __pyx_t_6pytraj_8datasets_10c_datasets_TcmapType;

/* "datasets/c_datasetlist.pxd":8
 * from ..cython_extra_header.cpp_vector cimport vector as cppvector
 * 
 * ctypedef cppvector[_Dataset*] DataListType             # <<<<<<<<<<<<<<
 * ctypedef cppvector[_Dataset*].const_iterator const_iterator
 * 
 */
typedef std::vector<DataSet *>  __pyx_t_6pytraj_8datasets_13c_datasetlist_DataListType;

/* "datasets/c_datasetlist.pxd":9
 * 
 * ctypedef cppvector[_Dataset*] DataListType
 * ctypedef cppvector[_Dataset*].const_iterator const_iterator             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "DataSetList.h":
 */
typedef std::vector<DataSet *> ::const_iterator __pyx_t_6pytraj_8datasets_13c_datasetlist_const_iterator;

/* "c_core.pxd":11
 * from ..datasets.c_datasetlist cimport _DatasetList, DatasetList
 * 
 * ctypedef _BaseIOtype* (*AllocatorType)()             # <<<<<<<<<<<<<<
 * ctypedef void (*HelpType)()
 * 
 */
typedef BaseIOtype *(*__pyx_t_6pytraj_4core_6c_core_AllocatorType)(void);

/* "c_core.pxd":12
 * 
 * ctypedef _BaseIOtype* (*AllocatorType)()
 * ctypedef void (*HelpType)()             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "CpptrajState.h":
 */
typedef void (*__pyx_t_6pytraj_4core_6c_core_HelpType)(void);

/* "c_core.pxd":60
 *     cdef _BaseIOtype* baseptr0
 * 
 * ctypedef _DispatchObject* (*DispatchAllocatorType)()             # <<<<<<<<<<<<<<
 * cdef extern from "DispatchObject.h":
 *     cdef cppclass _DispatchObject "DispatchObject":
 */
typedef DispatchObject *(*__pyx_t_6pytraj_4core_6c_core_DispatchAllocatorType)(void);

/* "core/topology_objects.pxd":9
 * 
 * 
 * ctypedef cppvector[int].const_iterator bond_iterator             # <<<<<<<<<<<<<<
 * ctypedef cppvector[int].const_iterator excluded_iterator
 * 
 */
typedef std::vector<int> ::const_iterator __pyx_t_6pytraj_4core_16topology_objects_bond_iterator;

/* "core/topology_objects.pxd":10
 * 
 * ctypedef cppvector[int].const_iterator bond_iterator
 * ctypedef cppvector[int].const_iterator excluded_iterator             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Atom.h":
 */
typedef std::vector<int> ::const_iterator __pyx_t_6pytraj_4core_16topology_objects_excluded_iterator;

/* "frame.pxd":12
 * from ..core.c_core cimport _AtomMask, AtomMask
 * 
 * ctypedef vector[float] CRDtype             # <<<<<<<<<<<<<<
 * ctypedef vector[double] Darray
 * 
 */
typedef std::vector<float>  __pyx_t_6pytraj_10trajectory_5frame_CRDtype;

/* "frame.pxd":13
 * 
 * ctypedef vector[float] CRDtype
 * ctypedef vector[double] Darray             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "Frame.h" nogil:
 */
typedef std::vector<double>  __pyx_t_6pytraj_10trajectory_5frame_Darray;

/* "math/cpp_math.pxd":27
 *         #iterator end()
 * 
 * cdef class Grid:             # <<<<<<<<<<<<<<
 *     pass
 *     cdef _Grid[float]* thisptr
 */
struct __pyx_obj_6pytraj_4math_8cpp_math_Grid {
  PyObject_HEAD
  Grid<float>  *thisptr;
};


/* "math/cpp_math.pxd":86
 *         double * Dptr()
 * 
 * cdef class Matrix_3x3:             # <<<<<<<<<<<<<<
 *     cdef _Matrix_3x3* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4math_8cpp_math_Matrix_3x3 {
  PyObject_HEAD
  Matrix_3x3 *thisptr;
};


/* "math/cpp_math.pxd":128
 *         double * Dptr()
 * 
 * cdef class Vec3:             # <<<<<<<<<<<<<<
 *     cdef _Vec3* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_4math_8cpp_math_Vec3 {
  PyObject_HEAD
  Vec3 *thisptr;
  int _own_memory;
};


/* "box.pxd":58
 *         double& index_opr "operator[]"(int idx)
 * 
 * cdef class Box:             # <<<<<<<<<<<<<<
 *     cdef _Box* thisptr
 */
struct __pyx_obj_6pytraj_4core_3box_Box {
  PyObject_HEAD
  Box *thisptr;
};


/* "core/parameter_types.pxd":187
 * 
 * 
 * cdef class AngleType:             # <<<<<<<<<<<<<<
 *     cdef _AngleType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_AngleType {
  PyObject_HEAD
  AngleType *thisptr;
};


/* "core/parameter_types.pxd":190
 *     cdef _AngleType* thisptr
 * 
 * cdef class NonbondParmType:             # <<<<<<<<<<<<<<
 *     cdef _NonbondParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_NonbondParmType {
  PyObject_HEAD
  NonbondParmType *thisptr;
};


/* "core/parameter_types.pxd":193
 *     cdef _NonbondParmType* thisptr
 * 
 * cdef class LES_AtomType:             # <<<<<<<<<<<<<<
 *     cdef _LES_AtomType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_LES_AtomType {
  PyObject_HEAD
  LES_AtomType *thisptr;
};


/* "core/parameter_types.pxd":196
 *     cdef _LES_AtomType* thisptr
 * 
 * cdef class AngleParmType:             # <<<<<<<<<<<<<<
 *     cdef _AngleParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_AngleParmType {
  PyObject_HEAD
  AngleParmType *thisptr;
};


/* "core/parameter_types.pxd":199
 *     cdef _AngleParmType* thisptr
 * 
 * cdef class CmapType:             # <<<<<<<<<<<<<<
 *     cdef _CmapType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_CmapType {
  PyObject_HEAD
  CmapType *thisptr;
};


/* "core/parameter_types.pxd":202
 *     cdef _CmapType* thisptr
 * 
 * cdef class LES_ParmType:             # <<<<<<<<<<<<<<
 *     cdef _LES_ParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_LES_ParmType {
  PyObject_HEAD
  LES_ParmType *thisptr;
};


/* "core/parameter_types.pxd":205
 *     cdef _LES_ParmType* thisptr
 * 
 * cdef class HB_ParmType:             # <<<<<<<<<<<<<<
 *     cdef _HB_ParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_HB_ParmType {
  PyObject_HEAD
  HB_ParmType *thisptr;
};


/* "core/parameter_types.pxd":208
 *     cdef _HB_ParmType* thisptr
 * 
 * cdef class NonbondType:             # <<<<<<<<<<<<<<
 *     cdef _NonbondType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_NonbondType {
  PyObject_HEAD
  NonbondType *thisptr;
};


/* "core/parameter_types.pxd":211
 *     cdef _NonbondType* thisptr
 * 
 * cdef class ChamberParmType:             # <<<<<<<<<<<<<<
 *     cdef _ChamberParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_ChamberParmType {
  PyObject_HEAD
  ChamberParmType *thisptr;
};


/* "core/parameter_types.pxd":214
 *     cdef _ChamberParmType* thisptr
 * 
 * cdef class BondParmType:             # <<<<<<<<<<<<<<
 *     cdef _BondParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_BondParmType {
  PyObject_HEAD
  BondParmType *thisptr;
};


/* "core/parameter_types.pxd":217
 *     cdef _BondParmType* thisptr
 * 
 * cdef class CmapGridType:             # <<<<<<<<<<<<<<
 *     cdef _CmapGridType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_CmapGridType {
  PyObject_HEAD
  CmapGridType *thisptr;
};


/* "core/parameter_types.pxd":220
 *     cdef _CmapGridType* thisptr
 * 
 * cdef class DihedralType:             # <<<<<<<<<<<<<<
 *     cdef _DihedralType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_DihedralType {
  PyObject_HEAD
  DihedralType *thisptr;
};


/* "core/parameter_types.pxd":223
 *     cdef _DihedralType* thisptr
 * 
 * cdef class BondType:             # <<<<<<<<<<<<<<
 *     cdef _BondType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_BondType {
  PyObject_HEAD
  BondType *thisptr;
};


/* "core/parameter_types.pxd":226
 *     cdef _BondType* thisptr
 * 
 * cdef class CapParmType:             # <<<<<<<<<<<<<<
 *     cdef _CapParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_CapParmType {
  PyObject_HEAD
  CapParmType *thisptr;
};


/* "core/parameter_types.pxd":229
 *     cdef _CapParmType* thisptr
 * 
 * cdef class DihedralParmType:             # <<<<<<<<<<<<<<
 *     cdef _DihedralParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_15parameter_types_DihedralParmType {
  PyObject_HEAD
  DihedralParmType *thisptr;
};


/* "topology/topology.pxd":146
 *         double GetVDWradius(int) except +
 * 
 * cdef class Topology:             # <<<<<<<<<<<<<<
 *     cdef _Topology* thisptr
 *     cdef public bint _own_memory
 */
struct __pyx_obj_6pytraj_8topology_8topology_Topology {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pytraj_8topology_8topology_Topology *__pyx_vtab;
  Topology *thisptr;
  int _own_memory;
};


/* "topology/topology.pxd":169
 * 
 * 
 * cdef class ParmFile:             # <<<<<<<<<<<<<<
 *     cdef _ParmFile* thisptr
 */
struct __pyx_obj_6pytraj_8topology_8topology_ParmFile {
  PyObject_HEAD
  ParmFile *thisptr;
};


/* "core/coordinfo.pxd":27
 *         void SetForce(bint f)
 * 
 * cdef class CoordinateInfo:             # <<<<<<<<<<<<<<
 *     cdef _CoordinateInfo* thisptr
 */
struct __pyx_obj_6pytraj_4core_9coordinfo_CoordinateInfo {
  PyObject_HEAD
  CoordinateInfo *thisptr;
};


/* "datasets/c_datasets.pxd":45
 *         double Coord(unsigned int d, size_t p)
 * 
 * cdef class Dataset:             # <<<<<<<<<<<<<<
 *     cdef _Dataset* baseptr0
 *     cdef public object _base
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset {
  PyObject_HEAD
  DataSet *baseptr0;
  PyObject *_base;
};


/* "datasets/c_datasets.pxd":69
 * 
 * 
 * cdef class Dataset1D (Dataset):             # <<<<<<<<<<<<<<
 *     # baseptr0 is from Dataset
 *     cdef _Dataset1D* baseptr_1
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset1D {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset __pyx_base;
  DataSet_1D *baseptr_1;
};


/* "datasets/c_datasets.pxd":97
 * 
 * 
 * cdef class DatasetDouble (Dataset1D):             # <<<<<<<<<<<<<<
 *     cdef _DatasetDouble* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetDouble {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset1D __pyx_base;
  DataSet_double *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":112
 *         void Resize(size_t)
 * 
 * cdef class DatasetFloat (Dataset1D):             # <<<<<<<<<<<<<<
 *     cdef _DatasetFloat* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetFloat {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset1D __pyx_base;
  DataSet_float *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":128
 *         void Add( size_t, const void* )
 * 
 * cdef class DatasetInteger (Dataset1D):             # <<<<<<<<<<<<<<
 *     cdef _DatasetIntegerMem* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetInteger {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset1D __pyx_base;
  DataSet_integer_mem *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":141
 *         int Size()
 * 
 * cdef class DatasetString(Dataset1D):             # <<<<<<<<<<<<<<
 *     cdef _DatasetString* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetString {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset1D __pyx_base;
  DataSet_string *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":160
 *         void AddVxyz(const _Vec3& v, const _Vec3& c)
 * 
 * cdef class DatasetVector (Dataset):             # <<<<<<<<<<<<<<
 *     cdef _DatasetVector* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetVector {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset __pyx_base;
  DataSet_Vector *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":190
 *         const char * MatrixOutputString(MatrixType m)
 * 
 * cdef class Dataset2D (Dataset):             # <<<<<<<<<<<<<<
 *     cdef _Dataset2D* baseptr_1
 * 
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset2D {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset __pyx_base;
  DataSet_2D *baseptr_1;
};


/* "datasets/c_datasets.pxd":231
 * 
 * 
 * cdef class DatasetMatrixDouble (Dataset2D):             # <<<<<<<<<<<<<<
 *     cdef _DatasetMatrixDouble* thisptr
 *     cdef public bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetMatrixDouble {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset2D __pyx_base;
  DataSet_MatrixDbl *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":244
 * 
 * 
 * cdef class DatasetMatrixFloat(Dataset2D):             # <<<<<<<<<<<<<<
 *     cdef _DatasetMatrixFloat * thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetMatrixFloat {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset2D __pyx_base;
  DataSet_MatrixFlt *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":265
 *         inline double MZ() const
 * 
 * cdef class Dataset3D (Dataset):             # <<<<<<<<<<<<<<
 *     cdef _Dataset3D* baseptr_1
 * 
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset3D {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset __pyx_base;
  DataSet_3D *baseptr_1;
};


/* "datasets/c_datasets.pxd":285
 *         long int CalcIndex(int i, int j, int k) const
 * 
 * cdef class DatasetGridFloat (Dataset3D):             # <<<<<<<<<<<<<<
 *     cdef _DatasetGridFloat* thisptr
 *     cdef public bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetGridFloat {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset3D __pyx_base;
  DataSet_GridFlt *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":305
 *         long int CalcIndex(int i, int j, int k) const
 * 
 * cdef class DatasetGridDouble (Dataset3D):             # <<<<<<<<<<<<<<
 *     cdef _DatasetGridDouble* thisptr
 *     cdef public bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetGridDouble {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset3D __pyx_base;
  DataSet_GridDbl *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":335
 *         bint IsReduced() const
 * 
 * cdef class DatasetModes (Dataset):             # <<<<<<<<<<<<<<
 *     cdef _DatasetModes* thisptr
 *     cdef public bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetModes {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset __pyx_base;
  DataSet_Modes *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":367
 * 
 * 
 * cdef class DatasetRemLog:             # <<<<<<<<<<<<<<
 *     cdef _DatasetRemLog* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetRemLog {
  PyObject_HEAD
  DataSet_RemLog *thisptr;
};


/* "datasets/c_datasets.pxd":370
 *     cdef _DatasetRemLog* thisptr
 * 
 * cdef class ReplicaFrame:             # <<<<<<<<<<<<<<
 *     cdef _ReplicaFrame* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_ReplicaFrame {
  PyObject_HEAD
  DataSet_RemLog::ReplicaFrame *thisptr;
};


/* "datasets/c_datasets.pxd":388
 * 
 * 
 * cdef class DatasetMatrix3x3(Dataset):             # <<<<<<<<<<<<<<
 *     cdef _DatasetMatrix3x3* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetMatrix3x3 {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset __pyx_base;
  DataSet_Mat3x3 *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":412
 *         int LinearRegression(double&, double&, double&, bint) const
 * 
 * cdef class DatasetMesh(Dataset1D):             # <<<<<<<<<<<<<<
 *     cdef _DatasetMesh* thisptr
 *     cdef public bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetMesh {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset1D __pyx_base;
  DataSet_Mesh *thisptr;
  int _own_memory;
};


/* "datasets/c_datasets.pxd":437
 * 
 * 
 * cdef class DatasetCoords (Dataset):             # <<<<<<<<<<<<<<
 *     # Dataset has baseptr0
 *     cdef _DatasetCoords* baseptr_1
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetCoords {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset __pyx_base;
  DataSet_Coords *baseptr_1;
  struct __pyx_obj_6pytraj_8topology_8topology_Topology *_top;
  int _own_memory;
  PyObject *tmpfarray;
};


/* "datasets/c_datasets.pxd":464
 * 
 * 
 * cdef class DatasetCoordsCRD (DatasetCoords):             # <<<<<<<<<<<<<<
 *     cdef _DatasetCoordsCRD* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetCoordsCRD {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetCoords __pyx_base;
  DataSet_Coords_CRD *thisptr;
};


/* "datasets/c_datasets.pxd":485
 *         #void SetCRD(int idx, _Frame& fIn)
 * 
 * cdef class DatasetCoordsRef (DatasetCoords):             # <<<<<<<<<<<<<<
 *     cdef _DatasetCoordsRef* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetCoordsRef {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetCoords __pyx_base;
  DataSet_Coords_REF *thisptr;
};


/* "datasets/c_datasets.pxd":501
 * 
 * 
 * cdef class DatasetTopology (Dataset):             # <<<<<<<<<<<<<<
 *     cdef _DatasetTopology* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_10c_datasets_DatasetTopology {
  struct __pyx_obj_6pytraj_8datasets_10c_datasets_Dataset __pyx_base;
  DataSet_Topology *thisptr;
  int _own_memory;
};


/* "datasets/c_datasetlist.pxd":52
 * 
 * 
 * cdef class DatasetList:             # <<<<<<<<<<<<<<
 *     cdef _DatasetList* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_8datasets_13c_datasetlist_DatasetList {
  PyObject_HEAD
  DataSetList *thisptr;
  int _own_memory;
  PyObject *_parent_lists;
};


/* "datafiles/datafiles.pxd":46
 * 
 * 
 * cdef class DataFile:             # <<<<<<<<<<<<<<
 *     cdef _DataFile* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_9datafiles_9datafiles_DataFile {
  PyObject_HEAD
  DataFile *thisptr;
  int _own_memory;
};


/* "datafiles/datafiles.pxd":71
 * 
 * 
 * cdef class DataFileList:             # <<<<<<<<<<<<<<
 *     cdef _DataFileList* thisptr
 *     cdef bint _own_memory
 */
struct __pyx_obj_6pytraj_9datafiles_9datafiles_DataFileList {
  PyObject_HEAD
  DataFileList *thisptr;
  int _own_memory;
};


/* "c_core.pxd":35
 *         bint EmptyState()
 * 
 * cdef class CpptrajState:             # <<<<<<<<<<<<<<
 *     cdef _CpptrajState* thisptr
 *     cdef public DataFileList datafilelist
 */
struct __pyx_obj_6pytraj_4core_6c_core_CpptrajState {
  PyObject_HEAD
  CpptrajState *thisptr;
  struct __pyx_obj_6pytraj_9datafiles_9datafiles_DataFileList *datafilelist;
  struct __pyx_obj_6pytraj_8datasets_13c_datasetlist_DatasetList *_datasetlist;
};


/* "c_core.pxd":57
 *         pass
 * 
 * cdef class BaseIOtype:             # <<<<<<<<<<<<<<
 *     cdef _BaseIOtype* baseptr0
 * 
 */
struct __pyx_obj_6pytraj_4core_6c_core_BaseIOtype {
  PyObject_HEAD
  BaseIOtype *baseptr0;
};


/* "c_core.pxd":65
 *         pass
 * 
 * cdef class DispatchObject:             # <<<<<<<<<<<<<<
 *     cdef _DispatchObject* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_6c_core_DispatchObject {
  PyObject_HEAD
  DispatchObject *thisptr;
};


/* "c_core.pxd":69
 * 
 * # dummy class to hold function pointer
 * cdef class FunctPtr:             # <<<<<<<<<<<<<<
 *     cdef DispatchAllocatorType ptr
 *     # used for BaseIOtype
 */
struct __pyx_obj_6pytraj_4core_6c_core_FunctPtr {
  PyObject_HEAD
  __pyx_t_6pytraj_4core_6c_core_DispatchAllocatorType ptr;
  __pyx_t_6pytraj_4core_6c_core_AllocatorType allocptr;
};


/* "c_core.pxd":123
 * #    string
 * 
 * cdef class AtomMask:             # <<<<<<<<<<<<<<
 *     cdef _AtomMask* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_6c_core_AtomMask {
  PyObject_HEAD
  AtomMask *thisptr;
};


/* "c_core.pxd":145
 *         bint empty()
 * 
 * cdef class FileName:             # <<<<<<<<<<<<<<
 *     cdef _FileName* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_6c_core_FileName {
  PyObject_HEAD
  FileName *thisptr;
};


/* "c_core.pxd":167
 * 
 * 
 * cdef class NameType:             # <<<<<<<<<<<<<<
 *         cdef _NameType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_6c_core_NameType {
  PyObject_HEAD
  NameType *thisptr;
};


/* "c_core.pxd":211
 *         bint Contains(const char *) const
 * 
 * cdef class ArgList:             # <<<<<<<<<<<<<<
 *     cdef _ArgList* thisptr
 */
struct __pyx_obj_6pytraj_4core_6c_core_ArgList {
  PyObject_HEAD
  ArgList *thisptr;
};


/* "core/topology_objects.pxd":60
 * 
 * 
 * cdef class Atom:             # <<<<<<<<<<<<<<
 *     cdef _Atom* thisptr
 *     cdef int _index
 */
struct __pyx_obj_6pytraj_4core_16topology_objects_Atom {
  PyObject_HEAD
  Atom *thisptr;
  int _index;
  PyObject *resname;
  int own_memory;
};


/* "core/topology_objects.pxd":84
 *         inline bint NameIsSolvent() const
 * 
 * cdef class Residue:             # <<<<<<<<<<<<<<
 *     cdef _Residue* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_16topology_objects_Residue {
  PyObject_HEAD
  Residue *thisptr;
};


/* "core/topology_objects.pxd":103
 *         inline int NumAtoms() const
 * 
 * cdef class Molecule:             # <<<<<<<<<<<<<<
 *     cdef _Molecule* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_16topology_objects_Molecule {
  PyObject_HEAD
  Molecule *thisptr;
};


/* "frame.pxd":123
 * 
 * 
 * cdef class Frame:             # <<<<<<<<<<<<<<
 *     cdef _Frame* thisptr
 *     cdef public bint _own_memory
 */
struct __pyx_obj_6pytraj_10trajectory_5frame_Frame {
  PyObject_HEAD
  struct __pyx_vtabstruct_6pytraj_10trajectory_5frame_Frame *__pyx_vtab;
  Frame *thisptr;
  int _own_memory;
  PyObject *_top;
  PyObject *_as_view;
};


/* "c_action.pxd":63
 * 
 * 
 * cdef class Action:             # <<<<<<<<<<<<<<
 *     cdef _Action* baseptr
 *     cdef public int n_frames
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action {
  PyObject_HEAD
  Action *baseptr;
  int n_frames;
  int top_is_processed;
  PyObject *top;
  PyObject *_dslist;
  PyObject *_dflist;
  PyObject *_command;
  int own_memory;
};


/* "c_action.pxd":82
 * 
 * 
 * cdef class Action_Align(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Align* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Align {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Align *thisptr;
};


/* "c_action.pxd":93
 * 
 * 
 * cdef class Action_Angle(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Angle* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Angle {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Angle *thisptr;
};


/* "c_action.pxd":104
 * 
 * 
 * cdef class Action_AreaPerMol(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_AreaPerMol* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AreaPerMol {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_AreaPerMol *thisptr;
};


/* "c_action.pxd":115
 * 
 * 
 * cdef class Action_AtomMap(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_AtomMap* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AtomMap {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_AtomMap *thisptr;
};


/* "c_action.pxd":126
 * 
 * 
 * cdef class Action_AtomicCorr(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_AtomicCorr* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AtomicCorr {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_AtomicCorr *thisptr;
};


/* "c_action.pxd":137
 * 
 * 
 * cdef class Action_AtomicFluct(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_AtomicFluct* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AtomicFluct {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_AtomicFluct *thisptr;
};


/* "c_action.pxd":148
 * 
 * 
 * cdef class Action_AutoImage(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_AutoImage* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_AutoImage {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_AutoImage *thisptr;
};


/* "c_action.pxd":159
 * 
 * 
 * cdef class Action_Average(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Average* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Average {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Average *thisptr;
};


/* "c_action.pxd":170
 * 
 * 
 * cdef class Action_Bounds(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Bounds* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Bounds {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Bounds *thisptr;
};


/* "c_action.pxd":181
 * 
 * 
 * cdef class Action_Box(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Box* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Box {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Box *thisptr;
};


/* "c_action.pxd":192
 * 
 * 
 * cdef class Action_Center(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Center* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Center {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Center *thisptr;
};


/* "c_action.pxd":203
 * 
 * 
 * cdef class Action_Channel(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Channel* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Channel {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Channel *thisptr;
};


/* "c_action.pxd":214
 * 
 * 
 * cdef class Action_CheckChirality(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_CheckChirality* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_CheckChirality {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_CheckChirality *thisptr;
};


/* "c_action.pxd":225
 * 
 * 
 * cdef class Action_CheckStructure(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_CheckStructure* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_CheckStructure {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_CheckStructure *thisptr;
};


/* "c_action.pxd":236
 * 
 * 
 * cdef class Action_Closest(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Closest* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Closest {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Closest *thisptr;
};


/* "c_action.pxd":247
 * 
 * 
 * cdef class Action_ClusterDihedral(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_ClusterDihedral* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_ClusterDihedral {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_ClusterDihedral *thisptr;
};


/* "c_action.pxd":258
 * 
 * 
 * cdef class Action_Contacts(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Contacts* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Contacts {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Contacts *thisptr;
};


/* "c_action.pxd":269
 * 
 * 
 * cdef class Action_CreateCrd(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_CreateCrd* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_CreateCrd {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_CreateCrd *thisptr;
};


/* "c_action.pxd":280
 * 
 * 
 * cdef class Action_DNAionTracker(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_DNAionTracker* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_DNAionTracker {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_DNAionTracker *thisptr;
};


/* "c_action.pxd":291
 * 
 * 
 * cdef class Action_DSSP(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_DSSP* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_DSSP {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_DSSP *thisptr;
};


/* "c_action.pxd":302
 * 
 * 
 * cdef class Action_Density(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Density* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Density {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Density *thisptr;
};


/* "c_action.pxd":313
 * 
 * 
 * cdef class Action_Diffusion(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Diffusion* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Diffusion {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Diffusion *thisptr;
};


/* "c_action.pxd":324
 * 
 * 
 * cdef class Action_Dihedral(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Dihedral* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Dihedral {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Dihedral *thisptr;
};


/* "c_action.pxd":335
 * 
 * 
 * cdef class Action_Dipole(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Dipole* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Dipole {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Dipole *thisptr;
};


/* "c_action.pxd":346
 * 
 * 
 * cdef class Action_DistRmsd(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_DistRmsd* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_DistRmsd {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_DistRmsd *thisptr;
};


/* "c_action.pxd":357
 * 
 * 
 * cdef class Action_Distance(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Distance* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Distance {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Distance *thisptr;
};


/* "c_action.pxd":368
 * 
 * 
 * cdef class Action_Energy(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Energy* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Energy {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Energy *thisptr;
};


/* "c_action.pxd":379
 * 
 * 
 * cdef class Action_Esander(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Esander* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Esander {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Esander *thisptr;
};


/* "c_action.pxd":390
 * 
 * 
 * cdef class Action_FilterByData(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_FilterByData* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_FilterByData {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_FilterByData *thisptr;
};


/* "c_action.pxd":401
 * 
 * 
 * cdef class Action_FixAtomOrder(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_FixAtomOrder* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_FixAtomOrder {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_FixAtomOrder *thisptr;
};


/* "c_action.pxd":412
 * 
 * 
 * cdef class Action_FixImagedBonds(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_FixImagedBonds* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_FixImagedBonds {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_FixImagedBonds *thisptr;
};


/* "c_action.pxd":423
 * 
 * 
 * cdef class Action_GIST(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_GIST* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_GIST {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_GIST *thisptr;
};


/* "c_action.pxd":434
 * 
 * 
 * cdef class Action_Grid(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Grid* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Grid {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Grid *thisptr;
};


/* "c_action.pxd":445
 * 
 * 
 * cdef class Action_GridFreeEnergy(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_GridFreeEnergy* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_GridFreeEnergy {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_GridFreeEnergy *thisptr;
};


/* "c_action.pxd":456
 * 
 * 
 * cdef class Action_HydrogenBond(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_HydrogenBond* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_HydrogenBond {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_HydrogenBond *thisptr;
};


/* "c_action.pxd":467
 * 
 * 
 * cdef class Action_Image(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Image* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Image {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Image *thisptr;
};


/* "c_action.pxd":478
 * 
 * 
 * cdef class Action_Jcoupling(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Jcoupling* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Jcoupling {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Jcoupling *thisptr;
};


/* "c_action.pxd":489
 * 
 * 
 * cdef class Action_LESsplit(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_LESsplit* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_LESsplit {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_LESsplit *thisptr;
};


/* "c_action.pxd":500
 * 
 * 
 * cdef class Action_LIE(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_LIE* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_LIE {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_LIE *thisptr;
};


/* "c_action.pxd":511
 * 
 * 
 * cdef class Action_LipidOrder(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_LipidOrder* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_LipidOrder {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_LipidOrder *thisptr;
};


/* "c_action.pxd":522
 * 
 * 
 * cdef class Action_MakeStructure(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_MakeStructure* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_MakeStructure {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_MakeStructure *thisptr;
};


/* "c_action.pxd":533
 * 
 * 
 * cdef class Action_Mask(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Mask* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Mask {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Mask *thisptr;
};


/* "c_action.pxd":544
 * 
 * 
 * cdef class Action_Matrix(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Matrix* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Matrix {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Matrix *thisptr;
};


/* "c_action.pxd":555
 * 
 * 
 * cdef class Action_MinImage(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_MinImage* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_MinImage {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_MinImage *thisptr;
};


/* "c_action.pxd":566
 * 
 * 
 * cdef class Action_Molsurf(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Molsurf* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Molsurf {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Molsurf *thisptr;
};


/* "c_action.pxd":577
 * 
 * 
 * cdef class Action_MultiDihedral(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_MultiDihedral* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_MultiDihedral {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_MultiDihedral *thisptr;
};


/* "c_action.pxd":588
 * 
 * 
 * cdef class Action_MultiVector(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_MultiVector* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_MultiVector {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_MultiVector *thisptr;
};


/* "c_action.pxd":599
 * 
 * 
 * cdef class Action_NAstruct(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_NAstruct* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_NAstruct {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_NAstruct *thisptr;
};


/* "c_action.pxd":610
 * 
 * 
 * cdef class Action_NMRrst(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_NMRrst* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_NMRrst {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_NMRrst *thisptr;
};


/* "c_action.pxd":621
 * 
 * 
 * cdef class Action_NativeContacts(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_NativeContacts* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_NativeContacts {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_NativeContacts *thisptr;
};


/* "c_action.pxd":632
 * 
 * 
 * cdef class Action_OrderParameter(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_OrderParameter* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_OrderParameter {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_OrderParameter *thisptr;
};


/* "c_action.pxd":643
 * 
 * 
 * cdef class Action_Outtraj(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Outtraj* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Outtraj {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Outtraj *thisptr;
};


/* "c_action.pxd":654
 * 
 * 
 * cdef class Action_PairDist(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_PairDist* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_PairDist {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_PairDist *thisptr;
};


/* "c_action.pxd":665
 * 
 * 
 * cdef class Action_Pairwise(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Pairwise* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Pairwise {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Pairwise *thisptr;
};


/* "c_action.pxd":676
 * 
 * 
 * cdef class Action_Principal(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Principal* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Principal {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Principal *thisptr;
};


/* "c_action.pxd":687
 * 
 * 
 * cdef class Action_Projection(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Projection* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Projection {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Projection *thisptr;
};


/* "c_action.pxd":698
 * 
 * 
 * cdef class Action_Pucker(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Pucker* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Pucker {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Pucker *thisptr;
};


/* "c_action.pxd":709
 * 
 * 
 * cdef class Action_Radgyr(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Radgyr* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Radgyr {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Radgyr *thisptr;
};


/* "c_action.pxd":720
 * 
 * 
 * cdef class Action_Radial(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Radial* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Radial {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Radial *thisptr;
};


/* "c_action.pxd":731
 * 
 * 
 * cdef class Action_RandomizeIons(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_RandomizeIons* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_RandomizeIons {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_RandomizeIons *thisptr;
};


/* "c_action.pxd":742
 * 
 * 
 * cdef class Action_Remap(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Remap* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Remap {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Remap *thisptr;
};


/* "c_action.pxd":753
 * 
 * 
 * cdef class Action_ReplicateCell(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_ReplicateCell* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_ReplicateCell {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_ReplicateCell *thisptr;
};


/* "c_action.pxd":764
 * 
 * 
 * cdef class Action_Rmsd(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Rmsd* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Rmsd {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Rmsd *thisptr;
};


/* "c_action.pxd":775
 * 
 * 
 * cdef class Action_Rotate(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Rotate* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Rotate {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Rotate *thisptr;
};


/* "c_action.pxd":786
 * 
 * 
 * cdef class Action_RunningAvg(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_RunningAvg* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_RunningAvg {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_RunningAvg *thisptr;
};


/* "c_action.pxd":797
 * 
 * 
 * cdef class Action_STFC_Diffusion(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_STFC_Diffusion* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_STFC_Diffusion {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_STFC_Diffusion *thisptr;
};


/* "c_action.pxd":808
 * 
 * 
 * cdef class Action_Scale(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Scale* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Scale {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Scale *thisptr;
};


/* "c_action.pxd":819
 * 
 * 
 * cdef class Action_SetVelocity(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_SetVelocity* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_SetVelocity {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_SetVelocity *thisptr;
};


/* "c_action.pxd":830
 * 
 * 
 * cdef class Action_Spam(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Spam* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Spam {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Spam *thisptr;
};


/* "c_action.pxd":841
 * 
 * 
 * cdef class Action_Strip(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Strip* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Strip {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Strip *thisptr;
};


/* "c_action.pxd":852
 * 
 * 
 * cdef class Action_Surf(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Surf* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Surf {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Surf *thisptr;
};


/* "c_action.pxd":863
 * 
 * 
 * cdef class Action_SymmetricRmsd(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_SymmetricRmsd* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_SymmetricRmsd {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_SymmetricRmsd *thisptr;
};


/* "c_action.pxd":874
 * 
 * 
 * cdef class Action_Temperature(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Temperature* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Temperature {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Temperature *thisptr;
};


/* "c_action.pxd":885
 * 
 * 
 * cdef class Action_Translate(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Translate* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Translate {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Translate *thisptr;
};


/* "c_action.pxd":896
 * 
 * 
 * cdef class Action_Unstrip(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Unstrip* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Unstrip {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Unstrip *thisptr;
};


/* "c_action.pxd":907
 * 
 * 
 * cdef class Action_Unwrap(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Unwrap* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Unwrap {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Unwrap *thisptr;
};


/* "c_action.pxd":918
 * 
 * 
 * cdef class Action_Vector(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Vector* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Vector {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Vector *thisptr;
};


/* "c_action.pxd":929
 * 
 * 
 * cdef class Action_VelocityAutoCorr(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_VelocityAutoCorr* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_VelocityAutoCorr {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_VelocityAutoCorr *thisptr;
};


/* "c_action.pxd":940
 * 
 * 
 * cdef class Action_Volmap(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Volmap* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Volmap {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Volmap *thisptr;
};


/* "c_action.pxd":951
 * 
 * 
 * cdef class Action_Volume(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Volume* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Volume {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Volume *thisptr;
};


/* "c_action.pxd":962
 * 
 * 
 * cdef class Action_Watershell(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_Watershell* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_Watershell {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_Watershell *thisptr;
};


/* "c_action.pxd":973
 * 
 * 
 * cdef class Action_XtalSymm(Action):             # <<<<<<<<<<<<<<
 *     cdef _Action_XtalSymm* thisptr
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action_XtalSymm {
  struct __pyx_obj_6pytraj_8analysis_8c_action_8c_action_Action __pyx_base;
  Action_XtalSymm *thisptr;
};


/* "analysis/c_action/actionlist.pxd":30
 *         DispatchAllocatorType ActionAlloc(int i)
 * 
 * cdef class ActionList:             # <<<<<<<<<<<<<<
 *     cdef _ActionList* thisptr
 * 
 */
struct __pyx_obj_6pytraj_8analysis_8c_action_10actionlist_ActionList {
  PyObject_HEAD
  ActionList *thisptr;
  PyObject *top;
  int is_setup;
  PyObject *_dslist;
  PyObject *_dflist;
  PyObject *_crdinfo;
  unsigned int n_frames;
};


/* "pytraj/trajectory/c_traj/c_trajectory.pxd":28
 *         _Topology* TopPtr()
 * 
 * cdef class TrajectoryCpptraj:             # <<<<<<<<<<<<<<
 *     cdef Topology _top
 *     cdef _TrajectoryCpptraj* thisptr
 */
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj {
  PyObject_HEAD
  struct __pyx_obj_6pytraj_8topology_8topology_Topology *_top;
  DataSet_Coords_TRJ *thisptr;
  PyObject *tmpfarray;
  PyObject *_filelist;
  PyObject *_base;
  int _own_memory;
  struct __pyx_obj_6pytraj_8analysis_8c_action_10actionlist_ActionList *_actionlist;
  struct __pyx_obj_6pytraj_8datasets_13c_datasetlist_DatasetList *_cdslist;
  int _being_transformed;
  int _being_superposed;
  PyObject *_transform_commands;
  int _max_count_to_reset;
};


/* "pytraj/trajectory/c_traj/c_trajectory.pyx":13
 * 
 * 
 * def _split_range(int chunksize, int start, int stop):             # <<<<<<<<<<<<<<
 *     '''split a given range to n_chunks
 * 
 */
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range {
  PyObject_HEAD
  int __pyx_v__stop;
  int __pyx_v_chunksize;
  int __pyx_v_i;
  int __pyx_v_n_chunks;
  int __pyx_v_start;
  int __pyx_v_stop;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
};


/* "pytraj/trajectory/c_traj/c_trajectory.pyx":142
 *         return self.iterframe(*args, **kwd)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         '''iterately getting Frame instance
 *         '''
 */
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_1___iter__ {
  PyObject_HEAD
  struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *__pyx_v_frame;
  int __pyx_v_i;
  int __pyx_v_n_atoms;
  int __pyx_v_n_frames;
  struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self;
  int __pyx_t_0;
  int __pyx_t_1;
  int __pyx_t_2;
};


/* "pytraj/trajectory/c_traj/c_trajectory.pyx":174
 *             self.thisptr.CoordsSetup(other.thisptr[0], self.thisptr.CoordsInfo())
 * 
 *     def iterframe(self, int start=0, int stop=-1, int step=1, mask=None):             # <<<<<<<<<<<<<<
 *         '''iterately get Frames with start, stop, step
 *         Parameters
 */
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_2_iterframe {
  PyObject_HEAD
  int __pyx_v__end;
  struct __pyx_obj_6pytraj_4core_6c_core_AtomMask *__pyx_v_atm;
  struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *__pyx_v_frame;
  int __pyx_v_i;
  __Pyx_memviewslice __pyx_v_int_view;
  PyObject *__pyx_v_mask;
  unsigned int __pyx_v_max_frame;
  int __pyx_v_n_atoms;
  struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self;
  int __pyx_v_start;
  int __pyx_v_step;
  int __pyx_v_stop;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
};


/* "pytraj/trajectory/c_traj/c_trajectory.pyx":224
 *                 i += step
 * 
 *     def iterchunk(self, int chunksize=2, int start=0, int stop=-1):             # <<<<<<<<<<<<<<
 *         '''iterately get Frames with start, chunk
 *         returning Trajectory or Frame instance depend on `chunk` value
 */
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_3_iterchunk {
  PyObject_HEAD
  int __pyx_v__stop;
  int __pyx_v__tmp_start;
  int __pyx_v__tmp_stop;
  int __pyx_v_chunksize;
  PyObject *__pyx_v_farray;
  struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *__pyx_v_frame;
  int __pyx_v_i;
  PyObject *__pyx_v_idx;
  int __pyx_v_j;
  int __pyx_v_n_atoms;
  int __pyx_v_n_frames;
  int __pyx_v_real_n_frames;
  struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self;
  int __pyx_v_start;
  int __pyx_v_stop;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
};


/* "pytraj/trajectory/c_traj/c_trajectory.pyx":490
 *             return traj
 * 
 *     def _iterframe_indices(self, frame_indices):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef Frame frame = Frame()
 */
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_4__iterframe_indices {
  PyObject_HEAD
  struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *__pyx_v_frame;
  PyObject *__pyx_v_frame_indices;
  int __pyx_v_i;
  unsigned int __pyx_v_max_frame;
  struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "pytraj/trajectory/c_traj/c_trajectory.pyx":639
 *                     'box_type': self.top.box.type}
 * 
 *         def __set__(self, dict crdinfo):             # <<<<<<<<<<<<<<
 *             '''value is a dict
 *             '''
 */
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_5___set__ {
  PyObject_HEAD
  PyObject *__pyx_v_crdinfo;
};


/* "pytraj/trajectory/c_traj/c_trajectory.pyx":645
 *             cdef Box box
 * 
 *             crdinfo2 = dict((k, v) for k, v in crdinfo.item())             # <<<<<<<<<<<<<<
 * 
 *             if 'box' not in crdinfo2:
 */
struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_5___set__ *__pyx_outer_scope;
  PyObject *__pyx_v_k;
  PyObject *__pyx_v_v;
};


/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":280
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "topology/topology.pxd":146
 *         double GetVDWradius(int) except +
 * 
 * cdef class Topology:             # <<<<<<<<<<<<<<
 *     cdef _Topology* thisptr
 *     cdef public bint _own_memory
 */

struct __pyx_vtabstruct_6pytraj_8topology_8topology_Topology {
  std::vector<int>  (*_get_atom_bond_indices)(struct __pyx_obj_6pytraj_8topology_8topology_Topology *, Atom);
};
static struct __pyx_vtabstruct_6pytraj_8topology_8topology_Topology *__pyx_vtabptr_6pytraj_8topology_8topology_Topology;


/* "frame.pxd":123
 * 
 * 
 * cdef class Frame:             # <<<<<<<<<<<<<<
 *     cdef _Frame* thisptr
 *     cdef public bint _own_memory
 */

struct __pyx_vtabstruct_6pytraj_10trajectory_5frame_Frame {
  PyObject *(*_cy_update_atoms)(struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *, __Pyx_memviewslice, __Pyx_memviewslice, int);
  void (*_append_xyz_1d)(struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *, __Pyx_memviewslice);
  void (*_append_xyz_2d)(struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *, __Pyx_memviewslice);
};
static struct __pyx_vtabstruct_6pytraj_10trajectory_5frame_Frame *__pyx_vtabptr_6pytraj_10trajectory_5frame_Frame;


/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* DivInt[int].proto */
static CYTHON_INLINE int __Pyx_div_int(int, int);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* ModInt[int].proto */
static CYTHON_INLINE int __Pyx_mod_int(int, int);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* AssertionsEnabled.proto */
#define __Pyx_init_assertions_enabled()
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __pyx_assertions_enabled() (1)
#elif PY_VERSION_HEX < 0x03080000  ||  CYTHON_COMPILING_IN_PYPY  ||  defined(Py_LIMITED_API)
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030900A6
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  #undef __Pyx_init_assertions_enabled
  static void __Pyx_init_assertions_enabled(void) {
    __pyx_assertions_enabled_flag = ! _PyInterpreterState_GetConfig(__Pyx_PyThreadState_Current->interp)->optimization_level;
  }
#else
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return __Pyx_PyObject_GetAttrStr(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#else
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_0_29_36
#define __PYX_HAVE_RT_ImportType_proto_0_29_36
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_0_29_36 {
   __Pyx_ImportType_CheckSize_Error_0_29_36 = 0,
   __Pyx_ImportType_CheckSize_Warn_0_29_36 = 1,
   __Pyx_ImportType_CheckSize_Ignore_0_29_36 = 2
};
static PyTypeObject *__Pyx_ImportType_0_29_36(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_36 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_double(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_double(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_double(const char *itemp, PyObject *obj);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'pytraj.math.cpp_math' */
static PyTypeObject *__pyx_ptype_6pytraj_4math_8cpp_math_Grid = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4math_8cpp_math_Matrix_3x3 = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4math_8cpp_math_Vec3 = 0;

/* Module declarations from 'posix.types' */

/* Module declarations from 'posix.unistd' */

/* Module declarations from 'pytraj.cython_extra_header.cpp_vector' */

/* Module declarations from 'pytraj.core.box' */
static PyTypeObject *__pyx_ptype_6pytraj_4core_3box_Box = 0;

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'pytraj.core.parameter_types' */
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_AngleType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_NonbondParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_LES_AtomType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_AngleParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_CmapType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_LES_ParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_HB_ParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_NonbondType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_ChamberParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_BondParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_CmapGridType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_DihedralType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_BondType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_CapParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_15parameter_types_DihedralParmType = 0;

/* Module declarations from 'pytraj.topology.topology' */
static PyTypeObject *__pyx_ptype_6pytraj_8topology_8topology_Topology = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8topology_8topology_ParmFile = 0;

/* Module declarations from 'pytraj.core.coordinfo' */
static PyTypeObject *__pyx_ptype_6pytraj_4core_9coordinfo_CoordinateInfo = 0;

/* Module declarations from 'pytraj.datasets.c_datasets' */
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_Dataset = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_Dataset1D = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetDouble = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetFloat = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetInteger = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetString = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetVector = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_Dataset2D = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetMatrixDouble = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetMatrixFloat = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_Dataset3D = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetGridFloat = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetGridDouble = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetModes = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetRemLog = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_ReplicaFrame = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetMatrix3x3 = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetMesh = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetCoords = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetCoordsCRD = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetCoordsRef = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_10c_datasets_DatasetTopology = 0;

/* Module declarations from 'pytraj.datasets.c_datasetlist' */
static PyTypeObject *__pyx_ptype_6pytraj_8datasets_13c_datasetlist_DatasetList = 0;

/* Module declarations from 'pytraj.datafiles.datafiles' */
static PyTypeObject *__pyx_ptype_6pytraj_9datafiles_9datafiles_DataFile = 0;
static PyTypeObject *__pyx_ptype_6pytraj_9datafiles_9datafiles_DataFileList = 0;

/* Module declarations from 'pytraj.core.c_core' */
static PyTypeObject *__pyx_ptype_6pytraj_4core_6c_core_CpptrajState = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_6c_core_BaseIOtype = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_6c_core_DispatchObject = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_6c_core_FunctPtr = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_6c_core_AtomMask = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_6c_core_FileName = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_6c_core_NameType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_6c_core_ArgList = 0;

/* Module declarations from 'pytraj.core.topology_objects' */
static PyTypeObject *__pyx_ptype_6pytraj_4core_16topology_objects_Atom = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_16topology_objects_Residue = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_16topology_objects_Molecule = 0;

/* Module declarations from 'pytraj.trajectory.frame' */
static PyTypeObject *__pyx_ptype_6pytraj_10trajectory_5frame_Frame = 0;

/* Module declarations from 'pytraj.analysis.c_action.c_action' */
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Align = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Angle = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_AreaPerMol = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_AtomMap = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_AtomicCorr = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_AtomicFluct = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_AutoImage = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Average = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Bounds = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Box = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Center = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Channel = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_CheckChirality = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_CheckStructure = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Closest = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_ClusterDihedral = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Contacts = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_CreateCrd = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_DNAionTracker = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_DSSP = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Density = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Diffusion = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Dihedral = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Dipole = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_DistRmsd = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Distance = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Energy = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Esander = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_FilterByData = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_FixAtomOrder = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_FixImagedBonds = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_GIST = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Grid = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_GridFreeEnergy = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_HydrogenBond = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Image = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Jcoupling = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_LESsplit = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_LIE = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_LipidOrder = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_MakeStructure = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Mask = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Matrix = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_MinImage = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Molsurf = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_MultiDihedral = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_MultiVector = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_NAstruct = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_NMRrst = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_NativeContacts = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_OrderParameter = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Outtraj = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_PairDist = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Pairwise = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Principal = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Projection = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Pucker = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Radgyr = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Radial = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_RandomizeIons = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Remap = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_ReplicateCell = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Rmsd = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Rotate = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_RunningAvg = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_STFC_Diffusion = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Scale = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_SetVelocity = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Spam = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Strip = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Surf = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_SymmetricRmsd = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Temperature = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Translate = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Unstrip = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Unwrap = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Vector = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_VelocityAutoCorr = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Volmap = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Volume = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_Watershell = 0;
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_8c_action_Action_XtalSymm = 0;

/* Module declarations from 'pytraj.analysis.c_action.actionlist' */
static PyTypeObject *__pyx_ptype_6pytraj_8analysis_8c_action_10actionlist_ActionList = 0;

/* Module declarations from 'pytraj.trajectory.c_traj.c_trajectory' */
static PyTypeObject *__pyx_ptype_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj = 0;
static PyTypeObject *__pyx_ptype_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range = 0;
static PyTypeObject *__pyx_ptype_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_1___iter__ = 0;
static PyTypeObject *__pyx_ptype_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_2_iterframe = 0;
static PyTypeObject *__pyx_ptype_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_3_iterchunk = 0;
static PyTypeObject *__pyx_ptype_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_4__iterframe_indices = 0;
static PyTypeObject *__pyx_ptype_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_5___set__ = 0;
static PyTypeObject *__pyx_ptype_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "pytraj.trajectory.c_traj.c_trajectory"
extern int __pyx_module_is_main_pytraj__trajectory__c_traj__c_trajectory;
int __pyx_module_is_main_pytraj__trajectory__c_traj__c_trajectory = 0;

/* Implementation of 'pytraj.trajectory.c_traj.c_trajectory' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_DeprecationWarning;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static const char __pyx_k_O[] = "O";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = "i";
static const char __pyx_k__4[] = " ";
static const char __pyx_k_f8[] = "f8";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_os[] = "os";
static const char __pyx_k__14[] = "";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_box[] = "box";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_ref[] = "ref";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_top[] = "top";
static const char __pyx_k_xyz[] = "xyz";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_bool[] = "bool";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_mass[] = "mass";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_align[] = "align";
static const char __pyx_k_box_2[] = "_box";
static const char __pyx_k_boxes[] = "_boxes";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_force[] = "force";
static const char __pyx_k_image[] = "image";
static const char __pyx_k_myref[] = "myref";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_scale[] = "scale";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_top_2[] = "_top";
static const char __pyx_k_xyz_2[] = "_xyz";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_as_ptr[] = "_as_ptr";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_dslist[] = "dslist";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_forces[] = "forces";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_rotate[] = "rotate";
static const char __pyx_k_stop_2[] = "_stop";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_abspath[] = "abspath";
static const char __pyx_k_align_2[] = "_align";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_command[] = "command";
static const char __pyx_k_compute[] = "compute";
static const char __pyx_k_crdinfo[] = "_crdinfo";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_has_box[] = "has_box";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_n_atoms[] = "n_atoms";
static const char __pyx_k_refmask[] = "refmask";
static const char __pyx_k_refname[] = "refname";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_allocate[] = "_allocate";
static const char __pyx_k_box_type[] = "box_type";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_has_time[] = "has_time";
static const char __pyx_k_is_array[] = "is_array";
static const char __pyx_k_is_range[] = "is_range";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_n_chunks[] = "n_chunks";
static const char __pyx_k_n_frames[] = "n_frames";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_ref_mask[] = "ref_mask";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_velocity[] = "velocity";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_frame[] = "add_frame";
static const char __pyx_k_autoimage[] = "autoimage";
static const char __pyx_k_chunksize[] = "chunksize";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_has_force[] = "has_force";
static const char __pyx_k_iterchunk[] = "iterchunk";
static const char __pyx_k_iterframe[] = "iterframe";
static const char __pyx_k_principal[] = "principal";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_reference[] = "reference";
static const char __pyx_k_superpose[] = "superpose";
static const char __pyx_k_translate[] = "translate";
static const char __pyx_k_unitcells[] = "unitcells";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_Trajectory[] = "Trajectory";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_trajectory[] = "trajectory";
static const char __pyx_k_velocities[] = "velocities";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_frame_slice[] = "frame_slice";
static const char __pyx_k_split_range[] = "_split_range";
static const char __pyx_k_ensure_exist[] = "ensure_exist";
static const char __pyx_k_has_velocity[] = "has_velocity";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_my_str_method[] = "my_str_method";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_utils_cyutils[] = "utils.cyutils";
static const char __pyx_k_shared_methods[] = "shared_methods";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_chunk_must_be_2[] = "chunk must be >= 2";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_has_temperature[] = "has_temperature";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_get_positive_idx[] = "get_positive_idx";
static const char __pyx_k_TrajectoryCpptraj[] = "TrajectoryCpptraj";
static const char __pyx_k_do_transformation[] = "_do_transformation";
static const char __pyx_k_has_replcica_dims[] = "has_replcica_dims";
static const char __pyx_k_iterframe_indices[] = "_iterframe_indices";
static const char __pyx_k_must_set_Topology[] = "must set Topology";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_DeprecationWarning[] = "DeprecationWarning";
static const char __pyx_k_add_transformation[] = "_add_transformation";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_split_range_line_13[] = "_split_range (line 13)";
static const char __pyx_k_add_selected_indices[] = "add_selected_indices";
static const char __pyx_k_load_traj_by_indices[] = "_load_traj_by_indices";
static const char __pyx_k_modify_state_by_mask[] = "_modify_state_by_mask";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_index_is_out_of_range[] = "index is out of range";
static const char __pyx_k_initialize_actionlist[] = "_initialize_actionlist";
static const char __pyx_k_not_supported_keyword[] = "not supported keyword ";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_deprecated_use_crdinfo[] = "deprecated, use crdinfo";
static const char __pyx_k_utils_check_and_assert[] = "utils.check_and_assert";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_TrajectoryCpptraj___iter[] = "TrajectoryCpptraj.__iter__";
static const char __pyx_k_filename_must_a_a_string[] = "filename must a a string";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_TrajectoryCpptraj_iterchunk[] = "TrajectoryCpptraj.iterchunk";
static const char __pyx_k_TrajectoryCpptraj_iterframe[] = "TrajectoryCpptraj.iterframe";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_mask_refmask_ref_refname_mass[] = "{mask} {refmask} ref {refname} {mass}";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_boolean_index_did_not_match_the[] = "boolean index did not match the number of frames = %s ";
static const char __pyx_k_split_a_given_range_to_n_chunks[] = "split a given range to n_chunks\n\n    Examples\n    --------\n    >>> _split_range(3, 0, 10)\n    [(0, 3), (3, 6), (6, 10)]\n    ";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Read_only_Trajectory_Use_Traject[] = "Read only Trajectory. Use Trajectory class for __setitem__";
static const char __pyx_k_TrajectoryCpptraj___set___locals[] = "TrajectoryCpptraj.__set__.<locals>.genexpr";
static const char __pyx_k_TrajectoryCpptraj__iterframe_ind[] = "TrajectoryCpptraj._iterframe_indices";
static const char __pyx_k_TrajectoryCpptraj_metadata___get[] = "TrajectoryCpptraj.metadata.__get__ (line 601)";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_dont_know_how_to_cast_to_memoryv[] = "dont know how to cast to memoryview";
static const char __pyx_k_frame_slice_must_be_a_tuple_or_a[] = "frame_slice must be a tuple or a list of tuple";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_number_of_elements_must_me_small[] = "number of elements must me smaller than 4";
static const char __pyx_k_pytraj_trajectory_c_traj_c_traje[] = "pytraj.trajectory.c_traj.c_trajectory";
static const char __pyx_k_return_a_dict_of_general_informa[] = "return a dict of general information\n\n        Examples\n        --------\n        >>> traj.metadata\n        {'box_type': 'ortho',\n         'has_box': True,\n         'has_force': False,\n         'has_replcica_dims': False,\n         'has_temperature': False,\n         'has_time': True,\n         'has_velocity': False,\n         'n_atoms': 5293,\n         'n_frames': 10}\n        ";
static const char __pyx_k_start_chunk_must_be_smaller_than[] = "start + chunk must be smaller than max frames";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_pytraj_trajectory_c_traj_c_traje_2[] = "pytraj/trajectory/c_traj/c_trajectory.pyx";
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_DeprecationWarning;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_kp_u_Read_only_Trajectory_Use_Traject;
static PyObject *__pyx_n_s_Trajectory;
static PyObject *__pyx_n_s_TrajectoryCpptraj;
static PyObject *__pyx_n_s_TrajectoryCpptraj___iter;
static PyObject *__pyx_n_s_TrajectoryCpptraj___set___locals;
static PyObject *__pyx_n_s_TrajectoryCpptraj__iterframe_ind;
static PyObject *__pyx_n_s_TrajectoryCpptraj_iterchunk;
static PyObject *__pyx_n_s_TrajectoryCpptraj_iterframe;
static PyObject *__pyx_kp_u_TrajectoryCpptraj_metadata___get;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_kp_u__14;
static PyObject *__pyx_kp_u__4;
static PyObject *__pyx_n_s_abspath;
static PyObject *__pyx_n_s_add;
static PyObject *__pyx_n_s_add_frame;
static PyObject *__pyx_n_s_add_selected_indices;
static PyObject *__pyx_n_s_add_transformation;
static PyObject *__pyx_n_u_align;
static PyObject *__pyx_n_s_align_2;
static PyObject *__pyx_n_s_allocate;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_as_ptr;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_u_autoimage;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_u_bool;
static PyObject *__pyx_kp_u_boolean_index_did_not_match_the;
static PyObject *__pyx_n_s_box;
static PyObject *__pyx_n_u_box;
static PyObject *__pyx_n_s_box_2;
static PyObject *__pyx_n_u_box_type;
static PyObject *__pyx_n_s_boxes;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_u_center;
static PyObject *__pyx_kp_u_chunk_must_be_2;
static PyObject *__pyx_n_s_chunksize;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_command;
static PyObject *__pyx_n_s_compute;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_crdinfo;
static PyObject *__pyx_kp_u_deprecated_use_crdinfo;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_do_transformation;
static PyObject *__pyx_kp_u_dont_know_how_to_cast_to_memoryv;
static PyObject *__pyx_n_s_dslist;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_ensure_exist;
static PyObject *__pyx_n_s_enter;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_exit;
static PyObject *__pyx_n_u_f8;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_kp_u_filename_must_a_a_string;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_force;
static PyObject *__pyx_n_s_forces;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_frame_slice;
static PyObject *__pyx_kp_u_frame_slice_must_be_a_tuple_or_a;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_positive_idx;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_u_has_box;
static PyObject *__pyx_n_u_has_force;
static PyObject *__pyx_n_u_has_replcica_dims;
static PyObject *__pyx_n_u_has_temperature;
static PyObject *__pyx_n_u_has_time;
static PyObject *__pyx_n_u_has_velocity;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_u_image;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_kp_u_index_is_out_of_range;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_initialize_actionlist;
static PyObject *__pyx_n_u_int;
static PyObject *__pyx_n_s_is_array;
static PyObject *__pyx_n_s_is_range;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_iterchunk;
static PyObject *__pyx_n_s_iterframe;
static PyObject *__pyx_n_s_iterframe_indices;
static PyObject *__pyx_n_s_load_traj_by_indices;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mask;
static PyObject *__pyx_kp_u_mask_refmask_ref_refname_mass;
static PyObject *__pyx_n_s_mass;
static PyObject *__pyx_n_u_mass;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_modify_state_by_mask;
static PyObject *__pyx_kp_u_must_set_Topology;
static PyObject *__pyx_n_s_my_str_method;
static PyObject *__pyx_n_u_myref;
static PyObject *__pyx_n_s_n_atoms;
static PyObject *__pyx_n_u_n_atoms;
static PyObject *__pyx_n_s_n_chunks;
static PyObject *__pyx_n_s_n_frames;
static PyObject *__pyx_n_u_n_frames;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_kp_u_not_supported_keyword;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_kp_u_number_of_elements_must_me_small;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_u_principal;
static PyObject *__pyx_n_s_pytraj_trajectory_c_traj_c_traje;
static PyObject *__pyx_kp_s_pytraj_trajectory_c_traj_c_traje_2;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_ref;
static PyObject *__pyx_n_s_ref_mask;
static PyObject *__pyx_n_u_reference;
static PyObject *__pyx_n_s_refmask;
static PyObject *__pyx_n_s_refname;
static PyObject *__pyx_kp_u_return_a_dict_of_general_informa;
static PyObject *__pyx_n_u_rotate;
static PyObject *__pyx_n_u_scale;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_shared_methods;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_kp_u_split_a_given_range_to_n_chunks;
static PyObject *__pyx_n_s_split_range;
static PyObject *__pyx_kp_u_split_range_line_13;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_kp_u_start_chunk_must_be_smaller_than;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_stop_2;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_u_superpose;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_top;
static PyObject *__pyx_n_s_top_2;
static PyObject *__pyx_n_s_trajectory;
static PyObject *__pyx_n_u_translate;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unitcells;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_utils_check_and_assert;
static PyObject *__pyx_n_s_utils_cyutils;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_velocities;
static PyObject *__pyx_n_s_velocity;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_xyz;
static PyObject *__pyx_n_s_xyz_2;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory__split_range(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_chunksize, int __pyx_v_start, int __pyx_v_stop); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj___cinit__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_2_load(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_top, PyObject *__pyx_v_frame_slice); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_4_initialize_actionlist(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_6__len__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8n_frames___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_7n_atoms___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8__str__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_10__repr__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_12__call__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwd); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_14__iter__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_3top___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_3top_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, struct __pyx_obj_6pytraj_8topology_8topology_Topology *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_17iterframe(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, int __pyx_v_start, int __pyx_v_stop, int __pyx_v_step, PyObject *__pyx_v_mask); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_20iterchunk(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, int __pyx_v_chunksize, int __pyx_v_start, int __pyx_v_stop); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_23__setitem__(CYTHON_UNUSED struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_idx, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_25__getitem__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_idxs); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_9unitcells___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_3xyz___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8filelist___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_27__enter__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_29__exit__(CYTHON_UNUSED struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args); /* proto */
static void __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_31__dealloc__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_33_load_traj_by_indices(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_indices); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_35_iterframe_indices(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_frame_indices); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_38translate(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_40scale(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_42center(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_44rotate(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_46autoimage(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_48image(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_50principal(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_52superpose(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_mask, struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *__pyx_v_ref, PyObject *__pyx_v_ref_mask, PyObject *__pyx_v_mass); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_54_align(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_mask, struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *__pyx_v_ref, PyObject *__pyx_v_ref_mask, int __pyx_v_mass); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_56_add_transformation(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_command); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_58_remove_transformations(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_60_reset_transformation(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_62_do_transformation(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, struct __pyx_obj_6pytraj_10trajectory_5frame_Frame *__pyx_v_frame); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8metadata___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_7crdinfo___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8_crdinfo___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8_crdinfo_7__set___genexpr(PyObject *__pyx_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8_crdinfo_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_crdinfo); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_5_base___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_5_base_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_5_base_4__del__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_11_own_memory___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_11_own_memory_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_11_actionlist___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_11_actionlist_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_11_actionlist_4__del__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8_cdslist___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8_cdslist_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_8_cdslist_4__del__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_18_being_transformed___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_18_being_transformed_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_17_being_superposed___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_17_being_superposed_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_19_transform_commands___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_19_transform_commands_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_19_transform_commands_4__del__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_19_max_count_to_reset___get__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_19_max_count_to_reset_2__set__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_64__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_66__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_1___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_2_iterframe(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_3_iterchunk(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_4__iterframe_indices(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_5___set__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_item = {0, &__pyx_n_s_item, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_112105877;
static PyObject *__pyx_int_136983863;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_codeobj_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__12;
static PyObject *__pyx_slice__32;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_codeobj__44;
/* Late includes */
static PyObject *__pyx_gb_6pytraj_10trajectory_6c_traj_12c_trajectory_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "pytraj/trajectory/c_traj/c_trajectory.pyx":13
 * 
 * 
 * def _split_range(int chunksize, int start, int stop):             # <<<<<<<<<<<<<<
 *     '''split a given range to n_chunks
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_10trajectory_6c_traj_12c_trajectory_1_split_range(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pytraj_10trajectory_6c_traj_12c_trajectory__split_range[] = "_split_range(int chunksize, int start, int stop)\nsplit a given range to n_chunks\n\n    Examples\n    --------\n    >>> _split_range(3, 0, 10)\n    [(0, 3), (3, 6), (6, 10)]\n    ";
static PyMethodDef __pyx_mdef_6pytraj_10trajectory_6c_traj_12c_trajectory_1_split_range = {"_split_range", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6pytraj_10trajectory_6c_traj_12c_trajectory_1_split_range, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pytraj_10trajectory_6c_traj_12c_trajectory__split_range};
static PyObject *__pyx_pw_6pytraj_10trajectory_6c_traj_12c_trajectory_1_split_range(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_chunksize;
  int __pyx_v_start;
  int __pyx_v_stop;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_split_range (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_chunksize,&__pyx_n_s_start,&__pyx_n_s_stop,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_chunksize)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_split_range", 1, 3, 3, 1); __PYX_ERR(0, 13, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_split_range", 1, 3, 3, 2); __PYX_ERR(0, 13, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_split_range") < 0)) __PYX_ERR(0, 13, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_chunksize = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_chunksize == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 13, __pyx_L3_error)
    __pyx_v_start = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_start == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 13, __pyx_L3_error)
    __pyx_v_stop = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_stop == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 13, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_split_range", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 13, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.trajectory.c_traj.c_trajectory._split_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory__split_range(__pyx_self, __pyx_v_chunksize, __pyx_v_start, __pyx_v_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory__split_range(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_chunksize, int __pyx_v_start, int __pyx_v_stop) {
  struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_split_range", 0);
  __pyx_cur_scope = (struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range *)__pyx_tp_new_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range(__pyx_ptype_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 13, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_chunksize = __pyx_v_chunksize;
  __pyx_cur_scope->__pyx_v_start = __pyx_v_start;
  __pyx_cur_scope->__pyx_v_stop = __pyx_v_stop;
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6pytraj_10trajectory_6c_traj_12c_trajectory_2generator, __pyx_codeobj_, (PyObject *) __pyx_cur_scope, __pyx_n_s_split_range, __pyx_n_s_split_range, __pyx_n_s_pytraj_trajectory_c_traj_c_traje); if (unlikely(!gen)) __PYX_ERR(0, 13, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("pytraj.trajectory.c_traj.c_trajectory._split_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6pytraj_10trajectory_6c_traj_12c_trajectory_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range *__pyx_cur_scope = ((struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory___pyx_scope_struct___split_range *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_split_range", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 13, __pyx_L1_error)

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":23
 *     cdef int n_chunks, i, _stop
 * 
 *     n_chunks = (stop - start)//chunksize             # <<<<<<<<<<<<<<
 * 
 *     if ((stop - start) % chunksize) != 0:
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_stop - __pyx_cur_scope->__pyx_v_start);
  if (unlikely(__pyx_cur_scope->__pyx_v_chunksize == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 23, __pyx_L1_error)
  }
  else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_cur_scope->__pyx_v_chunksize == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_1))) {
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    __PYX_ERR(0, 23, __pyx_L1_error)
  }
  __pyx_cur_scope->__pyx_v_n_chunks = __Pyx_div_int(__pyx_t_1, __pyx_cur_scope->__pyx_v_chunksize);

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":25
 *     n_chunks = (stop - start)//chunksize
 * 
 *     if ((stop - start) % chunksize) != 0:             # <<<<<<<<<<<<<<
 *         n_chunks += 1
 * 
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_stop - __pyx_cur_scope->__pyx_v_start);
  if (unlikely(__pyx_cur_scope->__pyx_v_chunksize == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    __PYX_ERR(0, 25, __pyx_L1_error)
  }
  __pyx_t_2 = ((__Pyx_mod_int(__pyx_t_1, __pyx_cur_scope->__pyx_v_chunksize) != 0) != 0);
  if (__pyx_t_2) {

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":26
 * 
 *     if ((stop - start) % chunksize) != 0:
 *         n_chunks += 1             # <<<<<<<<<<<<<<
 * 
 *     for i in range(n_chunks):
 */
    __pyx_cur_scope->__pyx_v_n_chunks = (__pyx_cur_scope->__pyx_v_n_chunks + 1);

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":25
 *     n_chunks = (stop - start)//chunksize
 * 
 *     if ((stop - start) % chunksize) != 0:             # <<<<<<<<<<<<<<
 *         n_chunks += 1
 * 
 */
  }

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":28
 *         n_chunks += 1
 * 
 *     for i in range(n_chunks):             # <<<<<<<<<<<<<<
 *         if i < n_chunks - 1:
 *             _stop = start + (i + 1) * chunksize
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_n_chunks;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_4;

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":29
 * 
 *     for i in range(n_chunks):
 *         if i < n_chunks - 1:             # <<<<<<<<<<<<<<
 *             _stop = start + (i + 1) * chunksize
 *         else:
 */
    __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_i < (__pyx_cur_scope->__pyx_v_n_chunks - 1)) != 0);
    if (__pyx_t_2) {

      /* "pytraj/trajectory/c_traj/c_trajectory.pyx":30
 *     for i in range(n_chunks):
 *         if i < n_chunks - 1:
 *             _stop = start + (i + 1) * chunksize             # <<<<<<<<<<<<<<
 *         else:
 *             _stop = stop
 */
      __pyx_cur_scope->__pyx_v__stop = (__pyx_cur_scope->__pyx_v_start + ((__pyx_cur_scope->__pyx_v_i + 1) * __pyx_cur_scope->__pyx_v_chunksize));

      /* "pytraj/trajectory/c_traj/c_trajectory.pyx":29
 * 
 *     for i in range(n_chunks):
 *         if i < n_chunks - 1:             # <<<<<<<<<<<<<<
 *             _stop = start + (i + 1) * chunksize
 *         else:
 */
      goto __pyx_L7;
    }

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":32
 *             _stop = start + (i + 1) * chunksize
 *         else:
 *             _stop = stop             # <<<<<<<<<<<<<<
 *         yield start + i * chunksize, _stop
 * 
 */
    /*else*/ {
      __pyx_cur_scope->__pyx_v__stop = __pyx_cur_scope->__pyx_v_stop;
    }
    __pyx_L7:;

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":33
 *         else:
 *             _stop = stop
 *         yield start + i * chunksize, _stop             # <<<<<<<<<<<<<<
 * 
 * cdef class TrajectoryCpptraj:
 */
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_cur_scope->__pyx_v_start + (__pyx_cur_scope->__pyx_v_i * __pyx_cur_scope->__pyx_v_chunksize))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_cur_scope->__pyx_v__stop); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 33, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":13
 * 
 * 
 * def _split_range(int chunksize, int start, int stop):             # <<<<<<<<<<<<<<
 *     '''split a given range to n_chunks
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_split_range", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/trajectory/c_traj/c_trajectory.pyx":36
 * 
 * cdef class TrajectoryCpptraj:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new _TrajectoryCpptraj()
 *         self._top = Topology()
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj___cinit__(((struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj___cinit__(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":37
 * cdef class TrajectoryCpptraj:
 *     def __cinit__(self):
 *         self.thisptr = new _TrajectoryCpptraj()             # <<<<<<<<<<<<<<
 *         self._top = Topology()
 *         # we use TopPtr here, self._top is a binding
 */
  __pyx_v_self->thisptr = new DataSet_Coords_TRJ();

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":38
 *     def __cinit__(self):
 *         self.thisptr = new _TrajectoryCpptraj()
 *         self._top = Topology()             # <<<<<<<<<<<<<<
 *         # we use TopPtr here, self._top is a binding
 *         self._top._own_memory = False
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6pytraj_8topology_8topology_Topology)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_top);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_top));
  __pyx_v_self->_top = ((struct __pyx_obj_6pytraj_8topology_8topology_Topology *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":40
 *         self._top = Topology()
 *         # we use TopPtr here, self._top is a binding
 *         self._top._own_memory = False             # <<<<<<<<<<<<<<
 *         self._filelist = []
 *         self._own_memory = True
 */
  __pyx_v_self->_top->_own_memory = 0;

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":41
 *         # we use TopPtr here, self._top is a binding
 *         self._top._own_memory = False
 *         self._filelist = []             # <<<<<<<<<<<<<<
 *         self._own_memory = True
 *         self._being_transformed = False
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_filelist);
  __Pyx_DECREF(__pyx_v_self->_filelist);
  __pyx_v_self->_filelist = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":42
 *         self._top._own_memory = False
 *         self._filelist = []
 *         self._own_memory = True             # <<<<<<<<<<<<<<
 *         self._being_transformed = False
 *         self._being_superposed = False
 */
  __pyx_v_self->_own_memory = 1;

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":43
 *         self._filelist = []
 *         self._own_memory = True
 *         self._being_transformed = False             # <<<<<<<<<<<<<<
 *         self._being_superposed = False
 *         self._transform_commands = []
 */
  __pyx_v_self->_being_transformed = 0;

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":44
 *         self._own_memory = True
 *         self._being_transformed = False
 *         self._being_superposed = False             # <<<<<<<<<<<<<<
 *         self._transform_commands = []
 *         self._max_count_to_reset = 50000 # for reset superpose memory
 */
  __pyx_v_self->_being_superposed = 0;

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":45
 *         self._being_transformed = False
 *         self._being_superposed = False
 *         self._transform_commands = []             # <<<<<<<<<<<<<<
 *         self._max_count_to_reset = 50000 # for reset superpose memory
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_transform_commands);
  __Pyx_DECREF(__pyx_v_self->_transform_commands);
  __pyx_v_self->_transform_commands = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":46
 *         self._being_superposed = False
 *         self._transform_commands = []
 *         self._max_count_to_reset = 50000 # for reset superpose memory             # <<<<<<<<<<<<<<
 * 
 *     def _load(self, filename=None, top=None, frame_slice=(0, -1, 1)):
 */
  __pyx_v_self->_max_count_to_reset = 0xC350;

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":36
 * 
 * cdef class TrajectoryCpptraj:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new _TrajectoryCpptraj()
 *         self._top = Topology()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.trajectory.c_traj.c_trajectory.TrajectoryCpptraj.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/trajectory/c_traj/c_trajectory.pyx":48
 *         self._max_count_to_reset = 50000 # for reset superpose memory
 * 
 *     def _load(self, filename=None, top=None, frame_slice=(0, -1, 1)):             # <<<<<<<<<<<<<<
 *         '''
 *         filename : a single filename or a list of filenames
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_3_load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_2_load[] = "TrajectoryCpptraj._load(self, filename=None, top=None, frame_slice=(0, -1, 1))\n\n        filename : a single filename or a list of filenames\n        top : Topology-like object\n        take_slice : add slice\n        ";
static PyObject *__pyx_pw_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_3_load(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_top = 0;
  PyObject *__pyx_v_frame_slice = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_load (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_top,&__pyx_n_s_frame_slice,0};
    PyObject* values[3] = {0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_tuple__2);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_top);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frame_slice);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_load") < 0)) __PYX_ERR(0, 48, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
    __pyx_v_top = values[1];
    __pyx_v_frame_slice = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_load", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 48, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.trajectory.c_traj.c_trajectory.TrajectoryCpptraj._load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_2_load(((struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *)__pyx_v_self), __pyx_v_filename, __pyx_v_top, __pyx_v_frame_slice);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_10trajectory_6c_traj_12c_trajectory_17TrajectoryCpptraj_2_load(struct __pyx_obj_6pytraj_10trajectory_6c_traj_12c_trajectory_TrajectoryCpptraj *__pyx_v_self, PyObject *__pyx_v_filename, PyObject *__pyx_v_top, PyObject *__pyx_v_frame_slice) {
  struct __pyx_obj_6pytraj_8topology_8topology_Topology *__pyx_v_tmp_top = 0;
  struct __pyx_obj_6pytraj_4core_6c_core_ArgList *__pyx_v__arglist = 0;
  PyObject *__pyx_v_start = NULL;
  PyObject *__pyx_v_stop = NULL;
  PyObject *__pyx_v_step = NULL;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  std::string __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load", 0);
  __Pyx_INCREF(__pyx_v_filename);
  __Pyx_INCREF(__pyx_v_frame_slice);

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":57
 *         cdef ArgList _arglist
 * 
 *         if top is None:             # <<<<<<<<<<<<<<
 *             tmp_top = <Topology> self.top
 *         else:
 */
  __pyx_t_1 = (__pyx_v_top == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":58
 * 
 *         if top is None:
 *             tmp_top = <Topology> self.top             # <<<<<<<<<<<<<<
 *         else:
 *             tmp_top = <Topology> top
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_top); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_tmp_top = ((struct __pyx_obj_6pytraj_8topology_8topology_Topology *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":57
 *         cdef ArgList _arglist
 * 
 *         if top is None:             # <<<<<<<<<<<<<<
 *             tmp_top = <Topology> self.top
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":60
 *             tmp_top = <Topology> self.top
 *         else:
 *             tmp_top = <Topology> top             # <<<<<<<<<<<<<<
 * 
 *         # convert pytraj frame_slice to cpptraj's understandable format (str)
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_top;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_v_tmp_top = ((struct __pyx_obj_6pytraj_8topology_8topology_Topology *)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":64
 *         # convert pytraj frame_slice to cpptraj's understandable format (str)
 *         # need to increase start, stop by +1 since cpptraj use +1 for cpptraj.in
 *         if not isinstance(frame_slice, tuple):             # <<<<<<<<<<<<<<
 *             if isinstance(frame_slice, list) and isinstance(frame_slice[0], tuple):
 *                 frame_slice = frame_slice[0]
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_frame_slice); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":65
 *         # need to increase start, stop by +1 since cpptraj use +1 for cpptraj.in
 *         if not isinstance(frame_slice, tuple):
 *             if isinstance(frame_slice, list) and isinstance(frame_slice[0], tuple):             # <<<<<<<<<<<<<<
 *                 frame_slice = frame_slice[0]
 *             else:
 */
    __pyx_t_2 = PyList_Check(__pyx_v_frame_slice); 
    __pyx_t_5 = (__pyx_t_2 != 0);
    if (__pyx_t_5) {
    } else {
      __pyx_t_1 = __pyx_t_5;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_frame_slice, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 65, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_Check(__pyx_t_4); 
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = (__pyx_t_5 != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L6_bool_binop_done:;
    if (likely(__pyx_t_1)) {

      /* "pytraj/trajectory/c_traj/c_trajectory.pyx":66
 *         if not isinstance(frame_slice, tuple):
 *             if isinstance(frame_slice, list) and isinstance(frame_slice[0], tuple):
 *                 frame_slice = frame_slice[0]             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError("frame_slice must be a tuple or a list of tuple")
 */
      __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_frame_slice, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF_SET(__pyx_v_frame_slice, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "pytraj/trajectory/c_traj/c_trajectory.pyx":65
 *         # need to increase start, stop by +1 since cpptraj use +1 for cpptraj.in
 *         if not isinstance(frame_slice, tuple):
 *             if isinstance(frame_slice, list) and isinstance(frame_slice[0], tuple):             # <<<<<<<<<<<<<<
 *                 frame_slice = frame_slice[0]
 *             else:
 */
      goto __pyx_L5;
    }

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":68
 *                 frame_slice = frame_slice[0]
 *             else:
 *                 raise ValueError("frame_slice must be a tuple or a list of tuple")             # <<<<<<<<<<<<<<
 *         if len(frame_slice) == 1:
 *             start = frame_slice[0]
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 68, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 68, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":64
 *         # convert pytraj frame_slice to cpptraj's understandable format (str)
 *         # need to increase start, stop by +1 since cpptraj use +1 for cpptraj.in
 *         if not isinstance(frame_slice, tuple):             # <<<<<<<<<<<<<<
 *             if isinstance(frame_slice, list) and isinstance(frame_slice[0], tuple):
 *                 frame_slice = frame_slice[0]
 */
  }

  /* "pytraj/trajectory/c_traj/c_trajectory.pyx":69
 *             else:
 *                 raise ValueError("frame_slice must be a tuple or a list of tuple")
 *         if len(frame_slice) == 1:             # <<<<<<<<<<<<<<
 *             start = frame_slice[0]
 *             stop = -1
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_frame_slice); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_6 == 1) != 0);
  if (__pyx_t_1) {

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":70
 *                 raise ValueError("frame_slice must be a tuple or a list of tuple")
 *         if len(frame_slice) == 1:
 *             start = frame_slice[0]             # <<<<<<<<<<<<<<
 *             stop = -1
 *             step = 1
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_frame_slice, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_start = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "pytraj/trajectory/c_traj/c_trajectory.pyx":71
 *         if len(frame_slice) == 1:
 *             start = frame_slice[0]
 *             stop = -1             # <<<<<<<<<<<<<<
 *         