#!/usr/bin/env python3

import argparse
import parmed
from parmed.periodic_table import Element as Element
from collections import defaultdict as ddict



class Restraint(object):
    def __init__(self,line):
        import re
        import numpy as np
        
        self.line = line
        self.angle = False
        self.dihed = False
        self.r12 = False
        self.iat = []
        self.rstwt = []
        self.r1 = -1000.
        self.r2 = 0
        self.r3 = 0
        self.r4 = 1000.
        self.rk2 = 0
        self.rk3 = 0

        line = line.replace(","," ")
        #print(line)
        cols = line.split()
        cols.remove("&rst")
        if "/" in cols:
            cols.remove("/")
        if "&end" in cols:
            cols.remove("&end")
        line = " ".join(cols)
        
        #print(line)
        
        keyvals = re.findall(r"(.*?)=([^=]+)",line)
        for i in range(len(keyvals)):
            k,v = keyvals[i]
            keyvals[i] = (k.strip(),v.strip())
        for i in range(len(keyvals)):
            k,v = keyvals[i]
            if len(k) == 0:
                pk,pv = keyvals[i-1]
                cols = pv.split()
                k = cols.pop()
                pv = " ".join(cols)
                keyvals[i-1] = pk,pv
                keyvals[i] = k,v
                
        #print(keyvals)
        
        for k,v in keyvals:
            if k == "iat":
                self.iat = [ int(x) for x in v.split() ]
                self.angle=False
                if len(self.iat) == 3:
                    self.angle = True
                elif len(self.iat) == 4:
                    if "rstwt" in [ k for k,v in keyvals ]:
                        self.angle = False
                        self.r12 = True
                    else:
                        self.angle = True
                        self.dihed = True
            elif k == "rk2":
                self.rk2 = float(v)
            elif k == "rk3":
                self.rk3 = float(v)
            elif k == "r1":
                self.r1 = float(v)
            elif k == "r2":
                self.r2 = float(v)
            elif k == "r3":
                self.r3 = float(v)
            elif k == "r4":
                self.r4 = float(v)
            elif k == "rstwt":
                self.rstwt = [ float(x) for x in v.split() ]
        #if self.angle:
            #f = (np.pi/180.)**2
            #self.rk2 *= f
            #self.rk3 *= f
        
    def energy(self,r):
        e = 0
        if r < self.r1:
            h = self.rk2 * (self.r1-self.r2)**2
            m = 2 * self.rk2 * (self.r1-self.r2)
            e = h + m*(r-self.r1)
        elif r < self.r2:
            e = self.rk2 * (r-self.r2)**2
        elif r < self.r3:
            e = 0
        elif r < self.r4:
            e = self.rk3 * (r-self.r3)**2
        else:
            h = self.rk3 * (self.r4-self.r3)**2
            m = 2 * self.rk3 * (self.r4-self.r3)
            e = h + m*(r-self.r4)
        return e

    def get_rxncrd(self,crds):
        import parmed.geometry
        import numpy as np
        
        if len(self.iat) == 2:
            a = crds[ self.iat[0] - 1 ]
            b = crds[ self.iat[1] - 1 ]
            x = np.sqrt( parmed.geometry.distance2(a,b) )
        elif self.dihed:
            a = crds[ self.iat[0] - 1 ]
            b = crds[ self.iat[1] - 1 ]
            c = crds[ self.iat[2] - 1 ]
            d = crds[ self.iat[3] - 1 ]
            x = parmed.geometry.dihedral(a,b,c,d) * np.pi / 180.
        elif self.angle:
            a = crds[ self.iat[0] - 1 ]
            b = crds[ self.iat[1] - 1 ]
            c = crds[ self.iat[2] - 1 ]
            x = parmed.geometry.angle(a,b,c) * np.pi / 180.
        elif len(self.iat) == 4:
            a = crds[ self.iat[0] - 1 ]
            b = crds[ self.iat[1] - 1 ]
            c = crds[ self.iat[2] - 1 ]
            d = crds[ self.iat[3] - 1 ]
            r1 = np.sqrt( parmed.geometry.distance2(a,b) )
            r2 = np.sqrt( parmed.geometry.distance2(c,d) )
            x = self.rstwt[0] * r1 + self.rstwt[1] * r2
        return x


    
    def get_umbrella(self):
        import numpy as np
        
        k = max(self.rk2,self.rk3)
        kj_per_kcal = 4.184
        nm_per_A = 0.1
        k = k * kj_per_kcal
        if not self.angle:
            k = k / ( nm_per_A * nm_per_A )
        k = k * 2.

        eq = 0.5 * ( self.r2 + self.r3 )
        if self.angle:
            eq = eq * np.pi / 180.
        else:
            eq = eq * nm_per_A
            
        return k,eq, self.rk2 == self.rk3, self.r2 == self.r3
    

def readdisang(fname):
    fh=open(fname,"r")
    restraints = []

    rline=""
    for line in fh:
        line = line.split("!")[0].strip()
        if "&rst" in line:
            rline=line
            if not ( "/" in line or "&end" in line ):
                for line in fh:
                    line = line.split("!")[0].strip()
                    if "/" in line or "&end" in line:
                        rline += " " + line
                        break
                    else:
                        rline += " " + line
            rline = rline.replace("/"," /")
            #print(rline)
            restraints.append( Restraint(rline) )
            rline=""
    fh.close()
    return restraints


class Disang(object):
    def __init__(self,fname):
        self.restraints = readdisang(fname)

    def energy(self,rcrds):
        e = 0
        n = len(rcrds)
        if n != len(self.restraints):
            raise Exception("len(rcrds) != len(self.restraints) (%i,%i)"%(n,len(self.restraints)))
        for i in range(n):
            e += self.restraints[i].energy(rcrds[i])
        return e





parser = argparse.ArgumentParser \
    ( formatter_class=argparse.RawDescriptionHelpFormatter,
      description="""
Writes an i-pi input file and xyz file used to perform simulations. Writes a plumed restraint file, given an optional amber disang file.
""" )
    
parser.add_argument \
    ("-p","--parm",
     help="MM parameter file",
     type=str,
     required=True )

parser.add_argument \
    ("-c","--crd",
     help="MM restart file",
     type=str,
    required=True )

parser.add_argument \
    ("-d","--disang",
     help="Amber disang restraint file",
     type=str,
     required=False )


parser.add_argument \
    ("-e","--nve",
     help="Constant energy simulation. "+
     "This is the default unless --nvt is specified. "+
     "The default is to perform classical MD unless --pimd is used.",
     action='store_true',
     required=False )

parser.add_argument \
    ("-t","--nvt",
     help="Constant temperature simulation."+
     "The default is to perform classical MD unless --pimd is used.",
     action='store_true',
     required=False )

parser.add_argument \
    ("-P","--pimd",
     help="Run PIMD+PIGLET rather than classical MD",
     action='store_true',
     required=False )

parser.add_argument \
    ("-f","--tdfep",
     help="Constant temperature simulation with TD-FEP + PIGLET."+
     "Extra analysis is performed to calculate the free energy of "+
     "isotopically substituting selected atomic masses. "+
     "The argument is a space-separated list of integers indicating "+
     "the atoms to be substituted (1-based indexing). "+
     "The initial masses are the most abundant isotope, and the final "+
     "masses are the second most abundant isotope. "+
     "The dynamics is performed in the NVT enemble.",
     action='append',
     type=int,
     nargs='+',
     required=False )

parser.add_argument \
    ("-l","--nlam",
     help="Number of mass values used to integrate the isotope "+
     "free energy change (TD-FEP + PIGLET). Default is 11.",
     type=int,
     default=11,
     required=False )



args = parser.parse_args()

# flatten list
if args.tdfep is not None:
    args.tdfep = [item for sublist in args.tdfep for item in sublist]


if args.nve and args.nvt:
    args.error("Cannot specify --nve and --nvt together")
if args.tdfep and args.nve:
    args.error("Cannot specify --nve and --tdfep together")
if args.tdfep and args.nvt:
    args.error("Cannot specify --nvt and --tdfep together")
    




StdIsotopeMass = [   0.0,  1.0078250,   4.0026000,   7.0160000,   9.0121800,  11.0093100,  12.0000000,  14.0030700,  15.9949100,  18.9984000,  19.9924400,  22.9898000,  23.9850400,  26.9815300,  27.9769300,  30.9937600,  31.9720700,  34.9688500,  39.9627200,  38.9637100,  39.9625900,  44.9559200,  47.9000000,  50.9440000,  51.9405000,  54.9381000,  55.9349000,  58.9332000,  57.9353000,  62.9298000,  63.9291000,  68.9257000,  73.9219000,  74.9216000,  79.9165000,  78.9183000,  83.8000000,  84.9117000,  87.9056000,  88.9054000,  89.9043000,  92.9060000,  97.9055000,  98.9062000, 101.9037000, 102.9048000, 105.9032000, 106.9041000, 113.9036000, 114.9041000, 117.9018000, 120.9038000, 129.9067000, 126.9004000, 131.9042000 ]

SecondIsotopeMass = [ 0.0,  2.0141020,   3.0160290,   6.0151220,   0.0000000,  10.0129370,  13.0033550,  15.0001090,  17.9991600,   0.0000000,  21.9913860,   0.0000000,  25.9825930,   0.0000000,  28.9764950,   0.0000000,  33.9678670,  36.9659030,  35.9675460,  40.9618260,  43.9554810,   0.0000000,  45.9526300,  49.9471630,  52.9406540,   0.0000000,  53.9396150,   0.0000000,  59.9307910,  64.9277940,  65.9260370,  70.9247050,  71.9220760,   0.0000000,  77.9173100,  80.9162910,  85.9106100,  86.9091840,  85.9092620,   0.0000000,  93.9063160,   0.0000000,  95.9046790,  97.9072160, 103.9054300,   0.0000000, 107.9038940, 108.9047560, 111.9027570, 112.9040610, 117.9016060, 122.9042160, 127.9044610,   0.0000000, 128.9047800 ]





p = parmed.load_file( args.parm, xyz=args.crd )



disang = None
if args.disang:

    #xyz = []
    #for atom in p.atoms:
    #    xyz.append( [ atom.xx, atom.xy, atom.xz ] )

    fh = open( args.disang.replace(".disang","") + ".plumed", "w" )
    
    disang = Disang(args.disang)
    nbond = 0
    nangle = 0
    ndihed = 0
    nr12 = 0
    restraints = []
    cvs = []
    for rest in disang.restraints:
        #x = rest.get_rxncrd(xyz)
        k,eq,k_ok,eq_ok = rest.get_umbrella()
        if not k_ok:
            print("Skipping restraint because rk2 != rk3")
            continue
        if not eq_ok:
            print("Skipping restraint because r2 != r3")
            continue
        
        #print(x,k,eq,k_ok,eq_ok)
        if True:
            irest = len(restraints) + 1
            if len(rest.iat) == 2:
                fh.write("B%i: DISTANCE ATOMS=%i,%i\n"%(nbond+1,rest.iat[0],rest.iat[1]))
                fh.write("R%i: RESTRAINT ARG=B%i AT=%.8f KAPPA=%.8f\n"%(irest,nbond+1,eq,k))
                restraints.append( "R%i"%(irest) )
                cvs.append("B%i"%(nbond+1))
                nbond += 1
            elif rest.dihed:
                fh.write("T%i: TORSION ATOMS=%i,%i,%i,%i\n"%(ndihed+1,rest.iat[0],rest.iat[1],rest.iat[2],rest.iat[3]))
                fh.write("R%i: RESTRAINT ARG=T%i AT=%.8f KAPPA=%.8f\n"%(irest,ndihed+1,eq,k))
                restraints.append( "R%i"%(irest) )
                cvs.append("T%i"%(ndihed+1))
                ndihed += 1
            elif rest.angle:
                fh.write("A%i: ANGLE ATOMS=%i,%i,%i\n"%(nangle+1,rest.iat[0],rest.iat[1],rest.iat[2]))
                fh.write("R%i: RESTRAINT ARG=A%i AT=%.8f KAPPA=%.8f\n"%(irest,nangle+1,eq,k))
                restraints.append( "R%i"%(irest) )
                cvs.append("A%i"%(nangle+1))
                nangle += 1
            elif len(rest.iat) == 4:
                if rest.rstwt[0] > 0:
                    fh.write("D%iB1: DISTANCE ATOMS=%i,%i\n"%(nr12+1,rest.iat[0],rest.iat[1]))
                    fh.write("D%iB2: DISTANCE ATOMS=%i,%i\n"%(nr12+1,rest.iat[2],rest.iat[3]))
                else:
                    fh.write("D%iB2: DISTANCE ATOMS=%i,%i\n"%(nr12+1,rest.iat[0],rest.iat[1]))
                    fh.write("D%iB1: DISTANCE ATOMS=%i,%i\n"%(nr12+1,rest.iat[2],rest.iat[3]))
                fh.write("D%i: CUSTOM ARG=D%iB1,D%iB2 FUNC=x-y PERIODIC=NO\n"%(nr12+1,nr12+1,nr12+1))
                fh.write("R%i: RESTRAINT ARG=D%i AT=%.8f KAPPA=%.8f\n"%(irest,nr12+1,eq,k))
                restraints.append( "R%i"%(irest) )
                cvs.append("D%i"%(nr12+1))
                nr12 += 1

    fh.write("PRINT ARG=%s STRIDE=1 FILE=%s.plumed.dumpave\n"%( ",".join(cvs), args.disang  ))



if True:
    fh = open( args.crd.replace(".rst7","")+".xyz", "w" )
    fh.write("%i\n"%(len(p.atoms)))
    fh.write("# positions{angstrom} CELL{abcABC}: %12.7f %12.7f %12.7f %12.7f %12.7f %12.7f cell{angstrom}\n"%(p.box[0],p.box[1],p.box[2],p.box[3],p.box[4],p.box[5]))
    for a in p.atoms:
        if a.element < 1:
            raise Exception("Can't run i-pi with rigid waters nor dummy particles. Found particle with atomic number %i\n"%(a.element))
        fh.write("%2s  %12.7f %12.7f %12.7f\n"%(Element[a.element],a.xx,a.xy,a.xz))
    fh.close()



    
if True:
    import numpy as np
    
    base = "nve"
    if args.nvt:
        base = "nvt"
    elif args.tdfep:
        base = "tdfep"

        
    fh = open( base + ".xml", "w" )
    fh.write("""
<simulation verbosity='low'>
  <output prefix='%s'>
    <checkpoint stride='400'/>
    <trajectory stride="100" filename="xc" format="xyz">x_centroid{angstrom}</trajectory>
    <!--
    <trajectory stride="1" filename="pos" cell_units="angstrom">positions{angstrom}</trajectory>
    -->
"""%(base))

    if disang is not None:
        seenatoms = ddict(int)
        for rest in disang.restraints:
            k,eq,k_ok,eq_ok = rest.get_umbrella()
            if (not k_ok) or (not eq_ok):
                continue
            for iat in rest.iat:
                seenatoms[iat] += 1
        seenatoms = [ iat - 1 for iat in seenatoms ]
        seenatoms.sort()
        trajstr = ",".join(["atom_x{angstrom}(%i)"%(iat) for iat in seenatoms])
        fh.write("    <properties stride='4' filename='xcrd'>\n")
        fh.write("       [ time{picosecond}, %s ]\n"%(trajstr))
        fh.write("    </properties>\n\n")
        
        
    
    fh.write("""    <properties stride='4' filename='out'> 
         [ step, time{picosecond}, ensemble_bias{cal/mol}, conserved{cal/mol}, temperature{kelvin}, kinetic_md{cal/mol}, potential{cal/mol}, kinetic_cv{cal/mol}""")



    
    if args.tdfep:
        for a1idx in args.tdfep:
            idx = a1idx-1
            m0 = StdIsotopeMass[ p.atoms[idx].atomic_number ]
            m1 = SecondIsotopeMass[ p.atoms[idx].atomic_number ]
            ms = np.linspace(m0,m1,num=args.nlam)
            for m in ms:
                alpha = m/m0
                fh.write(", isotope_tdfep(%.10f;%i)"%(alpha,idx))
    fh.write(" ]\n    </properties>\n")

    fh.write("  </output>\n")


    fh.write("""
  <total_steps>8000</total_steps>

  <prng>
    <seed>3848</seed>
  </prng>
  
  <ffsocket mode='inet' name='sander'>
    <address>127.0.0.1</address>
    <port>31415</port>
  </ffsocket>
""")

    if args.disang is not None:
        fh.write("""
  <ffplumed name="plumed" pbc="False">
    <init_file mode="xyz"> %s </init_file>
    <plumeddat> %s </plumeddat>
  </ffplumed>
  
"""%(args.crd.replace(".rst7","")+".xyz", args.disang.replace(".disang","") + ".plumed" ))

    nbeads = 1
    if args.tdfep or args.pimd:
        nbeads = 6
    
    massline = ""
    if args.tdfep:
        for a1idx in args.tdfep:
            idx = a1idx-1
            m0 = StdIsotopeMass[ p.atoms[idx].atomic_number ]
            massline += "      <masses mode='manual' units='dalton' index='%i'>%.8f</masses>\n"%(idx,m0)

    fh.write("""
  <system>

    <initialize nbeads='%i'>
      <file mode='xyz'> %s </file>
      <velocities mode='thermal' units='kelvin'> 298 </velocities>
%s    </initialize>
    
    <forces>
      <force forcefield='sander'/>
    </forces>
"""%(nbeads, args.crd.replace(".rst7","")+".xyz", massline))


    fh.write("""
    <ensemble>
      
      <temperature units='kelvin'>298</temperature>
      <!-- <pressure units='bar'> 1.01325 </pressure> -->

""")

    if args.disang is not None:
        fh.write("""
      <bias>
        <force forcefield="plumed" nbeads="1"></force>
      </bias>
      <bias_weights shape="(1)"> [ 1.0 ] </bias_weights>
""")

    fh.write("    </ensemble>\n")


    if args.tdfep or args.pimd:
        fh.write("""

    <motion mode='dynamics'>
      <!-- <fixcom>True</fixcom> -->
      <dynamics mode='nvt'>
        <timestep units='femtosecond'>0.25</timestep>
	<!--
            <thermostat mode='pile_l'>
            <tau units='femtosecond'>100</tau>
            </thermostat>
	-->

	<!--
	    # Generated at http://cosmo-epfl.github.io/gle4md
	    # Please cite:
	    # M. Ceriotti, D.E. Manolopoulos, Phys. Rev. Lett. 109, 100604 (2012) 
	    # M. Ceriotti, G. Bussi and M. Parrinello, Phys. Rev. Lett. 103, 030603 (2009)
	    # PIGLET parameters. Accelerate convergence of path integral dynamics, including quantum kinetic energy.
	    # Use for simulations with 6 beads, using a RPMD (physical masses) representation
	    # of the path.
	    # The parameters were picked from
	    # library/piglet/pigle-6_20_8_t.[ac], 
	    # and shifted so that correspond to quantum fluctuations at 
	    # T=298 K
	    # and that they span a range up to 
	    # ωmax=4142.4121164 cm^-1
	-->
	<thermostat mode='nm_gle'>
	  <A shape='(6,9,9)'>
	    [
	    1.300513766690e-2,    9.078220950722e-6,    8.180522706851e-6,    1.196620464216e-5,    1.108609196233e-4,   -8.941338246404e-4,    7.817382329484e-3,   -1.206049888192e-2,   -5.215913547478e-2, 
	    -9.756343549369e-6,    2.131200614277e-7,    2.972243541454e-6,   -4.459298032276e-6,    2.177011229810e-7,    4.960251269751e-7,   -2.083064995647e-6,   -7.004617074013e-6,    2.299410255689e-5, 
	    -1.851243089560e-6,   -2.972243541454e-6,    1.956991859501e-6,    1.742357040415e-6,   -2.082265548357e-6,   -1.760771137012e-6,   -3.733162998255e-6,   -3.711884630223e-5,   -3.625483838477e-5, 
	    1.492481502899e-5,    4.459298032276e-6,   -1.742357040415e-6,    5.092476869103e-6,    2.033910859306e-6,    5.856365217540e-7,   -3.020170664006e-6,    1.868034354962e-5,   -5.049113665348e-6, 
	    1.059383195368e-4,   -2.177011229810e-7,    2.082265548357e-6,   -2.033910859306e-6,    5.467813757620e-5,   -6.684243951800e-6,   -9.770331146786e-7,   -2.159991642805e-4,    4.667176340213e-4, 
	    -7.611448585233e-4,   -4.960251269751e-7,    1.760771137012e-6,   -5.856365217540e-7,    6.684243951800e-6,    6.616597356640e-4,   -1.637891086976e-6,   -2.056652206438e-4,    2.960975881160e-4, 
	    7.659946833472e-3,    2.083064995647e-6,    3.733162998255e-6,    3.020170664006e-6,    9.770331146786e-7,    1.637891086976e-6,    6.390977118535e-3,   -6.246090363901e-5,    5.054994461623e-4, 
	    -1.078245092236e-2,    7.004617074013e-6,    3.711884630223e-5,   -1.868034354962e-5,    2.159991642805e-4,    2.056652206438e-4,    6.246090363901e-5,    1.730397061203e-1,    1.004651317366e-4, 
	    -5.467410217589e-2,   -2.299410255689e-5,    3.625483838477e-5,    5.049113665348e-6,   -4.667176340213e-4,   -2.960975881160e-4,   -5.054994461623e-4,   -1.004651317366e-4,    1.795223909984e+0, 
	    5.117136183963e-6,    5.932911372963e-3,    0.000000000000e+0,    1.067909281228e-2,    0.000000000000e+0,    4.379206927614e-3,    0.000000000000e+0,    8.105095013679e-5,    0.000000000000e+0, 
	    -5.932911372963e-3,    6.234672441897e-2,    3.224579408508e-2,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,   -3.224579408508e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -1.067909281228e-2,    0.000000000000e+0,    0.000000000000e+0,    1.530700540905e-2,    5.268453339500e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -5.268453339500e-3,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -4.379206927614e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    4.613575757408e-2,    1.054432354473e-2,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.054432354473e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0, 
	    -8.105095013679e-5,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    3.354861319292e-3,    1.064306224633e-3, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.064306224633e-3,   1.892775386091e-14, 
	    5.117136183963e-6,    5.932911372963e-3,    0.000000000000e+0,    1.067909281228e-2,    0.000000000000e+0,    4.379206927614e-3,    0.000000000000e+0,    8.105095013679e-5,    0.000000000000e+0, 
	    -5.932911372963e-3,    6.234672441897e-2,    3.224579408508e-2,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,   -3.224579408508e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -1.067909281228e-2,    0.000000000000e+0,    0.000000000000e+0,    1.530700540905e-2,    5.268453339500e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -5.268453339500e-3,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -4.379206927614e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    4.613575757408e-2,    1.054432354473e-2,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.054432354473e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0, 
	    -8.105095013679e-5,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    3.354861319292e-3,    1.064306224633e-3, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.064306224633e-3,   1.892775386091e-14, 
	    5.117136183963e-6,    5.932911372963e-3,    0.000000000000e+0,    1.067909281228e-2,    0.000000000000e+0,    4.379206927614e-3,    0.000000000000e+0,    8.105095013679e-5,    0.000000000000e+0, 
	    -5.932911372963e-3,    6.234672441897e-2,    3.224579408508e-2,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,   -3.224579408508e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -1.067909281228e-2,    0.000000000000e+0,    0.000000000000e+0,    1.530700540905e-2,    5.268453339500e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -5.268453339500e-3,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -4.379206927614e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    4.613575757408e-2,    1.054432354473e-2,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.054432354473e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0, 
	    -8.105095013679e-5,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    3.354861319292e-3,    1.064306224633e-3, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.064306224633e-3,   1.892775386091e-14, 
	    5.117136183963e-6,    5.932911372963e-3,    0.000000000000e+0,    1.067909281228e-2,    0.000000000000e+0,    4.379206927614e-3,    0.000000000000e+0,    8.105095013679e-5,    0.000000000000e+0, 
	    -5.932911372963e-3,    6.234672441897e-2,    3.224579408508e-2,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,   -3.224579408508e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -1.067909281228e-2,    0.000000000000e+0,    0.000000000000e+0,    1.530700540905e-2,    5.268453339500e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -5.268453339500e-3,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -4.379206927614e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    4.613575757408e-2,    1.054432354473e-2,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.054432354473e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0, 
	    -8.105095013679e-5,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    3.354861319292e-3,    1.064306224633e-3, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.064306224633e-3,   1.892775386091e-14, 
	    5.117136183963e-6,    5.932911372963e-3,    0.000000000000e+0,    1.067909281228e-2,    0.000000000000e+0,    4.379206927614e-3,    0.000000000000e+0,    8.105095013679e-5,    0.000000000000e+0, 
	    -5.932911372963e-3,    6.234672441897e-2,    3.224579408508e-2,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,   -3.224579408508e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -1.067909281228e-2,    0.000000000000e+0,    0.000000000000e+0,    1.530700540905e-2,    5.268453339500e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -5.268453339500e-3,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    -4.379206927614e-3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    4.613575757408e-2,    1.054432354473e-2,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.054432354473e-2,   1.892775386091e-14,    0.000000000000e+0,    0.000000000000e+0, 
	    -8.105095013679e-5,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    3.354861319292e-3,    1.064306224633e-3, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,   -1.064306224633e-3,   1.892775386091e-14
	    ]
	  </A>
	  <C shape='(6,9,9)' units='kelvin'>
	    [
	    1.788000000000e+3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    1.788000000000e+3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    1.788000000000e+3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    1.788000000000e+3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    1.788000000000e+3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    1.788000000000e+3,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    1.788000000000e+3,    0.000000000000e+0,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    1.788000000000e+3,    0.000000000000e+0, 
	    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    0.000000000000e+0,    1.788000000000e+3, 
	    2.227801036988e+3,   -1.299779789508e+2,   -1.107796656610e+3,    6.357571103560e+2,    5.923767941180e+2,   -1.366431488370e+3,   -3.255829741680e+3,   -4.508453243540e+2,   -1.150492747266e+3, 
	    -1.299779789508e+2,    9.335305054940e+3,    5.189385097100e-9,    1.866215755146e+2,    6.303195967360e+1,   -7.629714100100e+1,    4.533065728080e+0,   -1.073825264828e+1,    2.028728422702e+0, 
	    -1.107796656610e+3,    5.173495778820e-9,    9.131481282720e+3,   -3.857898061700e+2,    1.761128482058e+1,   -1.386265353382e+1,   -6.327545472860e+2,   -6.146535412480e+1,   -2.159563770420e+2, 
	    6.357571103560e+2,    1.866215755146e+2,   -3.857898061700e+2,    9.302421648940e+2,    6.589129852000e-9,   -1.835524424332e+1,   -1.349899849268e+3,   -3.180285111620e+2,   -4.684809542220e+1, 
	    5.923767941180e+2,    6.303195967360e+1,    1.761128482058e+1,    6.589298376960e-9,    2.130982943550e+3,    6.744751656360e+2,   -2.714255285474e+3,    2.319041259104e+2,   -2.260168921464e+3, 
	    -1.366431488370e+3,   -7.629714100100e+1,   -1.386265353382e+1,   -1.835524424332e+1,    6.744751656360e+2,    2.461322627988e+4,    4.122354597620e-8,   -3.530454377320e+1,    3.267403501440e+0, 
	    -3.255829741680e+3,    4.533065728080e+0,   -6.327545472860e+2,   -1.349899849268e+3,   -2.714255285474e+3,    4.122370424400e-8,    2.326103407038e+4,   -3.237090875880e+1,   -4.956756844540e+2, 
	    -4.508453243540e+2,   -1.073825264828e+1,   -6.146535412480e+1,   -3.180285111620e+2,    2.319041259104e+2,   -3.530454377320e+1,   -3.237090875880e+1,    8.062143059320e+4,    1.426957197656e-6, 
	    -1.150492747266e+3,    2.028728422702e+0,   -2.159563770420e+2,   -4.684809542220e+1,   -2.260168921464e+3,    3.267403501440e+0,   -4.956756844540e+2,    1.426952962778e-6,    8.053381620920e+4, 
	    2.227801036988e+3,   -1.299779789508e+2,   -1.107796656610e+3,    6.357571103560e+2,    5.923767941180e+2,   -1.366431488370e+3,   -3.255829741680e+3,   -4.508453243540e+2,   -1.150492747266e+3, 
	    -1.299779789508e+2,    9.335305054940e+3,    5.189385097100e-9,    1.866215755146e+2,    6.303195967360e+1,   -7.629714100100e+1,    4.533065728080e+0,   -1.073825264828e+1,    2.028728422702e+0, 
	    -1.107796656610e+3,    5.173495778820e-9,    9.131481282720e+3,   -3.857898061700e+2,    1.761128482058e+1,   -1.386265353382e+1,   -6.327545472860e+2,   -6.146535412480e+1,   -2.159563770420e+2, 
	    6.357571103560e+2,    1.866215755146e+2,   -3.857898061700e+2,    9.302421648940e+2,    6.589129852000e-9,   -1.835524424332e+1,   -1.349899849268e+3,   -3.180285111620e+2,   -4.684809542220e+1, 
	    5.923767941180e+2,    6.303195967360e+1,    1.761128482058e+1,    6.589298376960e-9,    2.130982943550e+3,    6.744751656360e+2,   -2.714255285474e+3,    2.319041259104e+2,   -2.260168921464e+3, 
	    -1.366431488370e+3,   -7.629714100100e+1,   -1.386265353382e+1,   -1.835524424332e+1,    6.744751656360e+2,    2.461322627988e+4,    4.122354597620e-8,   -3.530454377320e+1,    3.267403501440e+0, 
	    -3.255829741680e+3,    4.533065728080e+0,   -6.327545472860e+2,   -1.349899849268e+3,   -2.714255285474e+3,    4.122370424400e-8,    2.326103407038e+4,   -3.237090875880e+1,   -4.956756844540e+2, 
	    -4.508453243540e+2,   -1.073825264828e+1,   -6.146535412480e+1,   -3.180285111620e+2,    2.319041259104e+2,   -3.530454377320e+1,   -3.237090875880e+1,    8.062143059320e+4,    1.426957197656e-6, 
	    -1.150492747266e+3,    2.028728422702e+0,   -2.159563770420e+2,   -4.684809542220e+1,   -2.260168921464e+3,    3.267403501440e+0,   -4.956756844540e+2,    1.426952962778e-6,    8.053381620920e+4, 
	    2.227801036988e+3,   -1.299779789508e+2,   -1.107796656610e+3,    6.357571103560e+2,    5.923767941180e+2,   -1.366431488370e+3,   -3.255829741680e+3,   -4.508453243540e+2,   -1.150492747266e+3, 
	    -1.299779789508e+2,    9.335305054940e+3,    5.189385097100e-9,    1.866215755146e+2,    6.303195967360e+1,   -7.629714100100e+1,    4.533065728080e+0,   -1.073825264828e+1,    2.028728422702e+0, 
	    -1.107796656610e+3,    5.173495778820e-9,    9.131481282720e+3,   -3.857898061700e+2,    1.761128482058e+1,   -1.386265353382e+1,   -6.327545472860e+2,   -6.146535412480e+1,   -2.159563770420e+2, 
	    6.357571103560e+2,    1.866215755146e+2,   -3.857898061700e+2,    9.302421648940e+2,    6.589129852000e-9,   -1.835524424332e+1,   -1.349899849268e+3,   -3.180285111620e+2,   -4.684809542220e+1, 
	    5.923767941180e+2,    6.303195967360e+1,    1.761128482058e+1,    6.589298376960e-9,    2.130982943550e+3,    6.744751656360e+2,   -2.714255285474e+3,    2.319041259104e+2,   -2.260168921464e+3, 
	    -1.366431488370e+3,   -7.629714100100e+1,   -1.386265353382e+1,   -1.835524424332e+1,    6.744751656360e+2,    2.461322627988e+4,    4.122354597620e-8,   -3.530454377320e+1,    3.267403501440e+0, 
	    -3.255829741680e+3,    4.533065728080e+0,   -6.327545472860e+2,   -1.349899849268e+3,   -2.714255285474e+3,    4.122370424400e-8,    2.326103407038e+4,   -3.237090875880e+1,   -4.956756844540e+2, 
	    -4.508453243540e+2,   -1.073825264828e+1,   -6.146535412480e+1,   -3.180285111620e+2,    2.319041259104e+2,   -3.530454377320e+1,   -3.237090875880e+1,    8.062143059320e+4,    1.426957197656e-6, 
	    -1.150492747266e+3,    2.028728422702e+0,   -2.159563770420e+2,   -4.684809542220e+1,   -2.260168921464e+3,    3.267403501440e+0,   -4.956756844540e+2,    1.426952962778e-6,    8.053381620920e+4, 
	    2.227801036988e+3,   -1.299779789508e+2,   -1.107796656610e+3,    6.357571103560e+2,    5.923767941180e+2,   -1.366431488370e+3,   -3.255829741680e+3,   -4.508453243540e+2,   -1.150492747266e+3, 
	    -1.299779789508e+2,    9.335305054940e+3,    5.189385097100e-9,    1.866215755146e+2,    6.303195967360e+1,   -7.629714100100e+1,    4.533065728080e+0,   -1.073825264828e+1,    2.028728422702e+0, 
	    -1.107796656610e+3,    5.173495778820e-9,    9.131481282720e+3,   -3.857898061700e+2,    1.761128482058e+1,   -1.386265353382e+1,   -6.327545472860e+2,   -6.146535412480e+1,   -2.159563770420e+2, 
	    6.357571103560e+2,    1.866215755146e+2,   -3.857898061700e+2,    9.302421648940e+2,    6.589129852000e-9,   -1.835524424332e+1,   -1.349899849268e+3,   -3.180285111620e+2,   -4.684809542220e+1, 
	    5.923767941180e+2,    6.303195967360e+1,    1.761128482058e+1,    6.589298376960e-9,    2.130982943550e+3,    6.744751656360e+2,   -2.714255285474e+3,    2.319041259104e+2,   -2.260168921464e+3, 
	    -1.366431488370e+3,   -7.629714100100e+1,   -1.386265353382e+1,   -1.835524424332e+1,    6.744751656360e+2,    2.461322627988e+4,    4.122354597620e-8,   -3.530454377320e+1,    3.267403501440e+0, 
	    -3.255829741680e+3,    4.533065728080e+0,   -6.327545472860e+2,   -1.349899849268e+3,   -2.714255285474e+3,    4.122370424400e-8,    2.326103407038e+4,   -3.237090875880e+1,   -4.956756844540e+2, 
	    -4.508453243540e+2,   -1.073825264828e+1,   -6.146535412480e+1,   -3.180285111620e+2,    2.319041259104e+2,   -3.530454377320e+1,   -3.237090875880e+1,    8.062143059320e+4,    1.426957197656e-6, 
	    -1.150492747266e+3,    2.028728422702e+0,   -2.159563770420e+2,   -4.684809542220e+1,   -2.260168921464e+3,    3.267403501440e+0,   -4.956756844540e+2,    1.426952962778e-6,    8.053381620920e+4, 
	    2.227801036988e+3,   -1.299779789508e+2,   -1.107796656610e+3,    6.357571103560e+2,    5.923767941180e+2,   -1.366431488370e+3,   -3.255829741680e+3,   -4.508453243540e+2,   -1.150492747266e+3, 
	    -1.299779789508e+2,    9.335305054940e+3,    5.189385097100e-9,    1.866215755146e+2,    6.303195967360e+1,   -7.629714100100e+1,    4.533065728080e+0,   -1.073825264828e+1,    2.028728422702e+0, 
	    -1.107796656610e+3,    5.173495778820e-9,    9.131481282720e+3,   -3.857898061700e+2,    1.761128482058e+1,   -1.386265353382e+1,   -6.327545472860e+2,   -6.146535412480e+1,   -2.159563770420e+2, 
	    6.357571103560e+2,    1.866215755146e+2,   -3.857898061700e+2,    9.302421648940e+2,    6.589129852000e-9,   -1.835524424332e+1,   -1.349899849268e+3,   -3.180285111620e+2,   -4.684809542220e+1, 
	    5.923767941180e+2,    6.303195967360e+1,    1.761128482058e+1,    6.589298376960e-9,    2.130982943550e+3,    6.744751656360e+2,   -2.714255285474e+3,    2.319041259104e+2,   -2.260168921464e+3, 
	    -1.366431488370e+3,   -7.629714100100e+1,   -1.386265353382e+1,   -1.835524424332e+1,    6.744751656360e+2,    2.461322627988e+4,    4.122354597620e-8,   -3.530454377320e+1,    3.267403501440e+0, 
	    -3.255829741680e+3,    4.533065728080e+0,   -6.327545472860e+2,   -1.349899849268e+3,   -2.714255285474e+3,    4.122370424400e-8,    2.326103407038e+4,   -3.237090875880e+1,   -4.956756844540e+2, 
	    -4.508453243540e+2,   -1.073825264828e+1,   -6.146535412480e+1,   -3.180285111620e+2,    2.319041259104e+2,   -3.530454377320e+1,   -3.237090875880e+1,    8.062143059320e+4,    1.426957197656e-6, 
	    -1.150492747266e+3,    2.028728422702e+0,   -2.159563770420e+2,   -4.684809542220e+1,   -2.260168921464e+3,    3.267403501440e+0,   -4.956756844540e+2,    1.426952962778e-6,    8.053381620920e+4
	    ]
	  </C>
	</thermostat>

      </dynamics>

    </motion>

        """)
        
    elif args.nvt:
        fh.write("""


    <motion mode='dynamics'>
       <!-- <fixcom>True</fixcom> -->

       <dynamics mode='nvt'>
          <timestep units='femtosecond'>1.00</timestep>
          <thermostat mode='pile_l'>
             <tau units='femtosecond'>100</tau>
          </thermostat>
       </dynamics>

    </motion>

""")

    elif args.nve:
        fh.write("""
    <motion mode='dynamics'>
       <!-- <fixcom>False</fixcom> -->
       <dynamics mode='nve'>
          <timestep units='femtosecond'>1.0</timestep>
       </dynamics>
    </motion>
""")



    fh.write("\n  </system>\n")
    fh.write("</simulation>\n")
    fh.close()
