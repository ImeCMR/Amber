As a basic example, we consider here the minimization of a protein in a
simple solvent model.  The procedure consists of three steps:


Step 1.
 Generate some starting coordinates.

The first step is to obtain starting coordinates.
We begin with the bovine pancreatic trypsin inhibitor, and consider the file
6pti.pdb, exactly as distributed by the Protein Data Bank.
This file (as with most PDB files) needs some editing before it can be used
by Amber.  (See the Amber Manual for a more detailed discussion.)

First, alternate conformations are provided for residues 39 and 50, so we
need to figure out which one we want.  For this example, we choose the "A"
conformation, and manually edit the file to remove the alternate conformers.
Second, coordinates are provided for a phosphate group and a variety of
water molecules.  These are not needed for the calculation we are pursuing
here, so we also edit the file to remove these.
Third, the cysteine residues are involved in disulfide bonds, and need to
have their residue names changed in an editor from CYS to CYX to reflect this.
Finally, since we removed the phosphate groups, some of the CONECT records
now refer to non-existent atoms; if you are not sure that the CONECT records
are all correct then it may be safest to remove all of them, as we do for
this example.  Let's call this modified file 6pti.mod.pdb.

Although Amber tries hard to interpret files in PDB formats, it is typical
to have to do some manual editing before proceeding.  A general prescription
is: "keep running the loadPdb step in LEaP (see step 2, below), and editing
the PDB file, until there are no error messages."  In addition, various
pre-LEaP processing steps can be used, such as, pdb4amber.  Of course,
there is no substitute for sanity checking with visualization software.


Step 2.
 Run LEaP to generate the parameter and topology file.

This is a fairly straightforward exercise in loading in the PDB file, adding
the disulfide cross links, and saving the resulting files.
Typing the following commands should work in either tleap or xleap.
(Or execute these commands via the script, leap.in, e.g.: tleap -f leap.in .)
(Consult the manual for alternatives and details on protein force fields.)

source leaprc.protein.ff19SB
bpti = loadPdb 6pti.mod.pdb
bond bpti.5.SG bpti.55.SG
bond bpti.14.SG bpti.38.SG
bond bpti.30.SG bpti.51.SG
saveAmberParm bpti prmtop prmcrd
quit


Step 3.
 Perform some minimization.

Use this script:

# Running minimization for BPTI
cat << eof > min.in
# 200 steps of minimization, generalized Born solvent model
&cntrl
maxcyc=200, imin=1, cut=12.0, igb=1, ntb=0, ntpr=10,
/
eof
sander -i min.in -o 6pti.min1.out -c prmcrd -r 6pti.min1.xyz
/bin/rm min.in

This will perform minimization (imin=1) for 200 steps (maxcyc), using a
nonbonded cutoff of 12 Angstroms (cut), a generalized Born solvent model
(igb=1), and no periodic boundary (ntb=0); intermediate results will be
printed every 10 steps (ntpr).  Text output will go to file 6pti.min1.out,
and the final coordinates to file 6pti.min1.xyz.
The ".out" file is intended to be read by humans, and it is a summary of
the input parameters and a history of the progress of the minimization
which terminates with an energy of -2660 kcal/mol.

Of course, Amber can do much more than the above minimization.
This example illustrates the basic information flow in Amber: Cartesian
coordinate preparation (Step 1.), topology and force field selection
(Step 2.), and simulation program command specification ( Step 3.).
Typically the subsequent steps are several stages of system stabilization
(D. R. Roe and B. R. Brooks, J. Chem. Phys., 153, 054123 (2020);
https://doi.org/10.1063/5.0013849), equilibration, production molecular
dynamics runs, and analyses of trajectories.  The tutorials at
ambermd.org/tutorials/ should be consulted for examples of these latter steps.

