module test_xray_scaling_impl_cpu
  use funit
  use xray_pure_utils, only: real_kind
  implicit none
  integer, parameter , private :: rk = real_kind
  real(real_kind), parameter :: tolerance = 5e-5  ! Absolute tolerance
  
contains
  
  @test
  subroutine test_init_finalize_cycle()
    use xray_scaling_impl_cpu_module, only: init_scaling => init, finalize_scaling => finalize, optimize_scale_factors, combine, rescale
    implicit none
    integer, parameter :: n = 10
    integer, parameter :: n_work = n/2
    real(real_kind) :: resolution(n)
    real(real_kind) :: absFobs(n)
    complex(real_kind) :: Fprot(n)
    complex(real_kind) :: Fbulk(n)
    complex(real_kind) :: Fcalc(n)
    real(real_kind) :: expected_absFcalc(n)
    real(real_kind) :: mss4(n)
    integer :: hkl(3, n)
    integer :: i
    
    do i = 1, n
      
      hkl(:, n-i+1) = (/ i, i, i/)
      resolution(i) = i * 0.5
      mss4(n-i+1) = - i ** 2
      absFobs(i) = abs(cmplx(i, + i ** 2, real_kind))
      Fprot(i) = cmplx(i, + i ** 2, real_kind)
      Fbulk(i) = cmplx(i, - i ** 2, real_kind)
    end do

    call init_scaling(resolution, [1.0_rk, 1.0_rk, 1.0_rk], n_work, hkl)
    call optimize_scale_factors(absFobs, Fprot, Fbulk, mss4, hkl)
    Fcalc = rescale(combine(Fprot, Fbulk))
    call finalize_scaling()

    ! The following values were prior to more-cctbx-style-sf-scaling branch introduction
    ! expected_absFcalc = (/ &
    !     & 1.4779818095652295, 4.3199739932237113, 9.0993204614639538, 16.369627135828068, &
    !     & 26.527383250249926, 39.652976328334205, 55.370345643474664, 72.774353664407101, &
    !     & 90.467913936347486, 106.72601279923845 &
    !     & /)
    expected_absFcalc = (/ &
        & 1.4142135623730951, 4.4721359549995796, 9.4868329805051381, 16.492422502470642, &
        & 25.495097567963924, 36.496575181789318, 49.497474683058329, 64.498061986388393, &
        & 81.498466243236749, 100.49875621120890 &
        & /)
    
    @assertEqual(expected_absFcalc, abs(Fcalc), tolerance = tolerance)
    
 
  end subroutine test_init_finalize_cycle
  
  
  @test
  subroutine test_scaling_log_binning()
  
    use xray_pure_utils, only : calc_resolution, create_logspace_resolution_bins, sorted
  
    implicit none
  
    integer, parameter :: n_i = 20
    integer, parameter :: n_j = 20
    integer, parameter :: n_k = 20
    integer, parameter :: N = n_i * n_j * n_k
    integer :: hkl(3, N)
    real(real_kind) :: recip(3, 3)
  
    real(real_kind) :: resolution(N)
  
    integer :: expected_n_bins
    integer :: n_bins
    real(real_kind), allocatable :: min_resolution(:), max_resolution(:)
    integer, parameter :: max_n_bins = 30
    integer :: bin_start(max_n_bins), bin_size(max_n_bins)
    
    integer, parameter :: unit_num = 15
  
    integer :: i, j, k
  
    ! Read expected data generated by cctbx
    open (unit=unit_num, file="data/generated/test_scaling_log_binning.txt", action='read' )
    read (unit_num, *) expected_n_bins
    print *, expected_n_bins
    allocate(min_resolution(expected_n_bins), max_resolution(expected_n_bins))
    do i = 1, expected_n_bins
      read (unit_num, *) min_resolution(i), max_resolution(i)
    end do
    close (unit=unit_num)
  
    do i = 1, n_i
      do j = 1, n_j
        do k = 1, n_k
          hkl(:, 1 + (i - 1) * (n_k * n_j) + (j - 1) * (n_k) + (k - 1)) = (/ i, j, k /)
        end do
      end do
    end do
    
    ! Orthogonal unit cell (a=10, b=13, c=17)
    recip(:, 1) = (/ 1 / 10.0_rk, 0.0_rk, 0.0_rk /)
    recip(:, 2) = (/ 0.0_rk, 1 / 13.0_rk, 0.0_rk /)
    recip(:, 3) = (/ 0.0_rk, 0.0_rk, 1 / 17.0_rk /)
  
    resolution = calc_resolution(hkl, recip)
    
    resolution = sorted(resolution)

    call create_logspace_resolution_bins(resolution, 100, 50, bin_start, bin_size, n_bins)

    @assertEqual(expected_n_bins, n_bins)
    do i = 1, n_bins
!      print *,  i, minval(resolution(bin_start(i):bin_start(i) + bin_size(i) - 1)), maxval(resolution(bin_start(i):bin_start(i) + bin_size(i) - 1)), bin_size(i)
      @assertEqual(min_resolution(i), minval(resolution(bin_start(i):bin_start(i) + bin_size(i) - 1)), tolerance=1e-3)
      @assertEqual(max_resolution(i), maxval(resolution(bin_start(i):bin_start(i) + bin_size(i) - 1)), tolerance=1e-3)
    end do

    deallocate(min_resolution, max_resolution)
    
  end subroutine test_scaling_log_binning
  
end module test_xray_scaling_impl_cpu

